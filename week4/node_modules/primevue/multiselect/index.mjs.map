{"version":3,"file":"index.mjs","sources":["../../src/multiselect/BaseMultiSelect.vue","../../src/multiselect/MultiSelect.vue","../../src/multiselect/MultiSelect.vue?vue&type=template&id=0b05a8ab&lang.js"],"sourcesContent":["<script>\nimport BaseInput from '@primevue/core/baseinput';\nimport MultiSelectStyle from 'primevue/multiselect/style';\n\nexport default {\n    name: 'BaseMultiSelect',\n    extends: BaseInput,\n    props: {\n        options: Array,\n        optionLabel: null,\n        optionValue: null,\n        optionDisabled: null,\n        optionGroupLabel: null,\n        optionGroupChildren: null,\n        scrollHeight: {\n            type: String,\n            default: '14rem'\n        },\n        placeholder: String,\n        inputId: {\n            type: String,\n            default: null\n        },\n        panelClass: {\n            type: String,\n            default: null\n        },\n        panelStyle: {\n            type: null,\n            default: null\n        },\n        overlayClass: {\n            type: String,\n            default: null\n        },\n        overlayStyle: {\n            type: null,\n            default: null\n        },\n        dataKey: null,\n        showClear: {\n            type: Boolean,\n            default: false\n        },\n        clearIcon: {\n            type: String,\n            default: undefined\n        },\n        resetFilterOnClear: {\n            type: Boolean,\n            default: false\n        },\n        filter: Boolean,\n        filterPlaceholder: String,\n        filterLocale: String,\n        filterMatchMode: {\n            type: String,\n            default: 'contains'\n        },\n        filterFields: {\n            type: Array,\n            default: null\n        },\n        appendTo: {\n            type: [String, Object],\n            default: 'body'\n        },\n        display: {\n            type: String,\n            default: 'comma'\n        },\n        selectedItemsLabel: {\n            type: String,\n            default: null\n        },\n        maxSelectedLabels: {\n            type: Number,\n            default: null\n        },\n        selectionLimit: {\n            type: Number,\n            default: null\n        },\n        showToggleAll: {\n            type: Boolean,\n            default: true\n        },\n        loading: {\n            type: Boolean,\n            default: false\n        },\n        checkboxIcon: {\n            type: String,\n            default: undefined\n        },\n        dropdownIcon: {\n            type: String,\n            default: undefined\n        },\n        filterIcon: {\n            type: String,\n            default: undefined\n        },\n        loadingIcon: {\n            type: String,\n            default: undefined\n        },\n        removeTokenIcon: {\n            type: String,\n            default: undefined\n        },\n        chipIcon: {\n            type: String,\n            default: undefined\n        },\n        selectAll: {\n            type: Boolean,\n            default: null\n        },\n        resetFilterOnHide: {\n            type: Boolean,\n            default: false\n        },\n        virtualScrollerOptions: {\n            type: Object,\n            default: null\n        },\n        autoOptionFocus: {\n            type: Boolean,\n            default: false\n        },\n        autoFilterFocus: {\n            type: Boolean,\n            default: false\n        },\n        focusOnHover: {\n            type: Boolean,\n            default: true\n        },\n        highlightOnSelect: {\n            type: Boolean,\n            default: false\n        },\n        filterMessage: {\n            type: String,\n            default: null\n        },\n        selectionMessage: {\n            type: String,\n            default: null\n        },\n        emptySelectionMessage: {\n            type: String,\n            default: null\n        },\n        emptyFilterMessage: {\n            type: String,\n            default: null\n        },\n        emptyMessage: {\n            type: String,\n            default: null\n        },\n        tabindex: {\n            type: Number,\n            default: 0\n        },\n        ariaLabel: {\n            type: String,\n            default: null\n        },\n        ariaLabelledby: {\n            type: String,\n            default: null\n        }\n    },\n    style: MultiSelectStyle,\n    provide() {\n        return {\n            $pcMultiSelect: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n","<template>\n    <div ref=\"container\" :class=\"cx('root')\" :style=\"sx('root')\" @click=\"onContainerClick\" :data-p=\"containerDataP\" v-bind=\"ptmi('root')\">\n        <div class=\"p-hidden-accessible\" v-bind=\"ptm('hiddenInputContainer')\" :data-p-hidden-accessible=\"true\">\n            <input\n                ref=\"focusInput\"\n                :id=\"inputId\"\n                type=\"text\"\n                readonly\n                :disabled=\"disabled\"\n                :placeholder=\"placeholder\"\n                :tabindex=\"!disabled ? tabindex : -1\"\n                role=\"combobox\"\n                :aria-label=\"ariaLabel\"\n                :aria-labelledby=\"ariaLabelledby\"\n                aria-haspopup=\"listbox\"\n                :aria-expanded=\"overlayVisible\"\n                :aria-controls=\"$id + '_list'\"\n                :aria-activedescendant=\"focused ? focusedOptionId : undefined\"\n                :aria-invalid=\"invalid || undefined\"\n                @focus=\"onFocus\"\n                @blur=\"onBlur\"\n                @keydown=\"onKeyDown\"\n                v-bind=\"ptm('hiddenInput')\"\n            />\n        </div>\n        <div :class=\"cx('labelContainer')\" v-bind=\"ptm('labelContainer')\">\n            <div :class=\"cx('label')\" :data-p=\"labelDataP\" v-bind=\"ptm('label')\">\n                <slot name=\"value\" :value=\"d_value\" :placeholder=\"placeholder\">\n                    <template v-if=\"display === 'comma'\">\n                        {{ label || 'empty' }}\n                    </template>\n                    <template v-else-if=\"display === 'chip'\">\n                        <template v-if=\"chipSelectedItems\">\n                            <span>{{ label }}</span>\n                        </template>\n                        <template v-else>\n                            <span v-for=\"item of d_value\" :key=\"getLabelByValue(item)\" :class=\"cx('chipItem')\" v-bind=\"ptm('chipItem')\">\n                                <slot name=\"chip\" :value=\"item\" :removeCallback=\"(event) => removeOption(event, item)\">\n                                    <!-- TODO: removetokenicon and removeTokenIcon  deprecated since v4.0. Use chipicon slot and chipIcon prop-->\n                                    <Chip :class=\"cx('pcChip')\" :label=\"getLabelByValue(item)\" :removeIcon=\"chipIcon || removeTokenIcon\" removable :unstyled=\"unstyled\" @remove=\"removeOption($event, item)\" :pt=\"ptm('pcChip')\">\n                                        <template #removeicon>\n                                            <slot :name=\"$slots.chipicon ? 'chipicon' : 'removetokenicon'\" :class=\"cx('chipIcon')\" :item=\"item\" :removeCallback=\"(event) => removeOption(event, item)\" />\n                                        </template>\n                                    </Chip>\n                                </slot>\n                            </span>\n                        </template>\n                        <template v-if=\"!d_value || d_value.length === 0\">{{ placeholder || 'empty' }}</template>\n                    </template>\n                </slot>\n            </div>\n        </div>\n        <slot v-if=\"isClearIconVisible\" name=\"clearicon\" :class=\"cx('clearIcon')\" :clearCallback=\"onClearClick\">\n            <component :is=\"clearIcon ? 'i' : 'TimesIcon'\" ref=\"clearIcon\" :class=\"[cx('clearIcon'), clearIcon]\" @click=\"onClearClick\" v-bind=\"ptm('clearIcon')\" data-pc-section=\"clearicon\" />\n        </slot>\n        <div :class=\"cx('dropdown')\" v-bind=\"ptm('dropdown')\">\n            <slot v-if=\"loading\" name=\"loadingicon\" :class=\"cx('loadingIcon')\">\n                <span v-if=\"loadingIcon\" :class=\"[cx('loadingIcon'), 'pi-spin', loadingIcon]\" aria-hidden=\"true\" v-bind=\"ptm('loadingIcon')\" />\n                <SpinnerIcon v-else :class=\"cx('loadingIcon')\" spin aria-hidden=\"true\" v-bind=\"ptm('loadingIcon')\" />\n            </slot>\n            <slot v-else name=\"dropdownicon\" :class=\"cx('dropdownIcon')\">\n                <component :is=\"dropdownIcon ? 'span' : 'ChevronDownIcon'\" :class=\"[cx('dropdownIcon'), dropdownIcon]\" aria-hidden=\"true\" :data-p=\"dropdownIconDataP\" v-bind=\"ptm('dropdownIcon')\" />\n            </slot>\n        </div>\n        <Portal :appendTo=\"appendTo\">\n            <transition name=\"p-connected-overlay\" @enter=\"onOverlayEnter\" @after-enter=\"onOverlayAfterEnter\" @leave=\"onOverlayLeave\" @after-leave=\"onOverlayAfterLeave\" v-bind=\"ptm('transition')\">\n                <div v-if=\"overlayVisible\" :ref=\"overlayRef\" :style=\"[panelStyle, overlayStyle]\" :class=\"[cx('overlay'), panelClass, overlayClass]\" @click=\"onOverlayClick\" @keydown=\"onOverlayKeyDown\" :data-p=\"overlayDataP\" v-bind=\"ptm('overlay')\">\n                    <span\n                        ref=\"firstHiddenFocusableElementOnOverlay\"\n                        role=\"presentation\"\n                        aria-hidden=\"true\"\n                        class=\"p-hidden-accessible p-hidden-focusable\"\n                        :tabindex=\"0\"\n                        @focus=\"onFirstHiddenFocus\"\n                        v-bind=\"ptm('hiddenFirstFocusableEl')\"\n                        :data-p-hidden-accessible=\"true\"\n                        :data-p-hidden-focusable=\"true\"\n                    ></span>\n                    <slot name=\"header\" :value=\"d_value\" :options=\"visibleOptions\"></slot>\n                    <div v-if=\"(showToggleAll && selectionLimit == null) || filter\" :class=\"cx('header')\" v-bind=\"ptm('header')\">\n                        <Checkbox\n                            v-if=\"showToggleAll && selectionLimit == null\"\n                            :modelValue=\"allSelected\"\n                            :binary=\"true\"\n                            :disabled=\"disabled\"\n                            :variant=\"variant\"\n                            :aria-label=\"toggleAllAriaLabel\"\n                            @change=\"onToggleAll\"\n                            :unstyled=\"unstyled\"\n                            :pt=\"getHeaderCheckboxPTOptions('pcHeaderCheckbox')\"\n                            :formControl=\"{ novalidate: true }\"\n                        >\n                            <template #icon=\"slotProps\">\n                                <component v-if=\"$slots.headercheckboxicon\" :is=\"$slots.headercheckboxicon\" :checked=\"slotProps.checked\" :class=\"slotProps.class\" />\n                                <component v-else-if=\"slotProps.checked\" :is=\"checkboxIcon ? 'span' : 'CheckIcon'\" :class=\"[slotProps.class, { [checkboxIcon]: slotProps.checked }]\" v-bind=\"getHeaderCheckboxPTOptions('pcHeaderCheckbox.icon')\" />\n                            </template>\n                        </Checkbox>\n                        <IconField v-if=\"filter\" :class=\"cx('pcFilterContainer')\" :unstyled=\"unstyled\" :pt=\"ptm('pcFilterContainer')\">\n                            <InputText\n                                ref=\"filterInput\"\n                                :value=\"filterValue\"\n                                @vue:mounted=\"onFilterUpdated\"\n                                @vue:updated=\"onFilterUpdated\"\n                                :class=\"cx('pcFilter')\"\n                                :placeholder=\"filterPlaceholder\"\n                                :disabled=\"disabled\"\n                                :variant=\"variant\"\n                                :unstyled=\"unstyled\"\n                                role=\"searchbox\"\n                                autocomplete=\"off\"\n                                :aria-owns=\"$id + '_list'\"\n                                :aria-activedescendant=\"focusedOptionId\"\n                                @keydown=\"onFilterKeyDown\"\n                                @blur=\"onFilterBlur\"\n                                @input=\"onFilterChange\"\n                                :pt=\"ptm('pcFilter')\"\n                                :formControl=\"{ novalidate: true }\"\n                            />\n                            <InputIcon :unstyled=\"unstyled\" :pt=\"ptm('pcFilterIconContainer')\">\n                                <slot name=\"filtericon\">\n                                    <span v-if=\"filterIcon\" :class=\"filterIcon\" v-bind=\"ptm('filterIcon')\" />\n                                    <SearchIcon v-else v-bind=\"ptm('filterIcon')\" />\n                                </slot>\n                            </InputIcon>\n                        </IconField>\n                        <span v-if=\"filter\" role=\"status\" aria-live=\"polite\" class=\"p-hidden-accessible\" v-bind=\"ptm('hiddenFilterResult')\" :data-p-hidden-accessible=\"true\">\n                            {{ filterResultMessageText }}\n                        </span>\n                    </div>\n                    <div :class=\"cx('listContainer')\" :style=\"{ 'max-height': virtualScrollerDisabled ? scrollHeight : '' }\" v-bind=\"ptm('listContainer')\">\n                        <VirtualScroller :ref=\"virtualScrollerRef\" v-bind=\"virtualScrollerOptions\" :items=\"visibleOptions\" :style=\"{ height: scrollHeight }\" :tabindex=\"-1\" :disabled=\"virtualScrollerDisabled\" :pt=\"ptm('virtualScroller')\">\n                            <template v-slot:content=\"{ styleClass, contentRef, items, getItemOptions, contentStyle, itemSize }\">\n                                <ul :ref=\"(el) => listRef(el, contentRef)\" :id=\"$id + '_list'\" :class=\"[cx('list'), styleClass]\" :style=\"contentStyle\" role=\"listbox\" aria-multiselectable=\"true\" :aria-label=\"listAriaLabel\" v-bind=\"ptm('list')\">\n                                    <template v-for=\"(option, i) of items\" :key=\"getOptionRenderKey(option, getOptionIndex(i, getItemOptions))\">\n                                        <li\n                                            v-if=\"isOptionGroup(option)\"\n                                            :id=\"$id + '_' + getOptionIndex(i, getItemOptions)\"\n                                            :style=\"{ height: itemSize ? itemSize + 'px' : undefined }\"\n                                            :class=\"cx('optionGroup')\"\n                                            role=\"option\"\n                                            v-bind=\"ptm('optionGroup')\"\n                                        >\n                                            <slot name=\"optiongroup\" :option=\"option.optionGroup\" :index=\"getOptionIndex(i, getItemOptions)\">{{ getOptionGroupLabel(option.optionGroup) }}</slot>\n                                        </li>\n                                        <li\n                                            v-else\n                                            :id=\"$id + '_' + getOptionIndex(i, getItemOptions)\"\n                                            v-ripple\n                                            :style=\"{ height: itemSize ? itemSize + 'px' : undefined }\"\n                                            :class=\"cx('option', { option, index: i, getItemOptions })\"\n                                            role=\"option\"\n                                            :aria-label=\"getOptionLabel(option)\"\n                                            :aria-selected=\"isSelected(option)\"\n                                            :aria-disabled=\"isOptionDisabled(option)\"\n                                            :aria-setsize=\"ariaSetSize\"\n                                            :aria-posinset=\"getAriaPosInset(getOptionIndex(i, getItemOptions))\"\n                                            @click=\"onOptionSelect($event, option, getOptionIndex(i, getItemOptions), true)\"\n                                            @mousemove=\"onOptionMouseMove($event, getOptionIndex(i, getItemOptions))\"\n                                            v-bind=\"getCheckboxPTOptions(option, getItemOptions, i, 'option')\"\n                                            :data-p-selected=\"isSelected(option)\"\n                                            :data-p-focused=\"focusedOptionIndex === getOptionIndex(i, getItemOptions)\"\n                                            :data-p-disabled=\"isOptionDisabled(option)\"\n                                        >\n                                            <Checkbox\n                                                :defaultValue=\"isSelected(option)\"\n                                                :binary=\"true\"\n                                                :tabindex=\"-1\"\n                                                :variant=\"variant\"\n                                                :unstyled=\"unstyled\"\n                                                :pt=\"getCheckboxPTOptions(option, getItemOptions, i, 'pcOptionCheckbox')\"\n                                                :formControl=\"{ novalidate: true }\"\n                                            >\n                                                <template #icon=\"slotProps\">\n                                                    <component v-if=\"$slots.optioncheckboxicon || $slots.itemcheckboxicon\" :is=\"$slots.optioncheckboxicon || $slots.itemcheckboxicon\" :checked=\"slotProps.checked\" :class=\"slotProps.class\" />\n                                                    <component\n                                                        v-else-if=\"slotProps.checked\"\n                                                        :is=\"checkboxIcon ? 'span' : 'CheckIcon'\"\n                                                        :class=\"[slotProps.class, { [checkboxIcon]: slotProps.checked }]\"\n                                                        v-bind=\"getCheckboxPTOptions(option, getItemOptions, i, 'pcOptionCheckbox.icon')\"\n                                                    />\n                                                </template>\n                                            </Checkbox>\n                                            <slot name=\"option\" :option=\"option\" :selected=\"isSelected(option)\" :index=\"getOptionIndex(i, getItemOptions)\">\n                                                <span v-bind=\"ptm('optionLabel')\">{{ getOptionLabel(option) }}</span>\n                                            </slot>\n                                        </li>\n                                    </template>\n                                    <li v-if=\"filterValue && (!items || (items && items.length === 0))\" :class=\"cx('emptyMessage')\" role=\"option\" v-bind=\"ptm('emptyMessage')\">\n                                        <slot name=\"emptyfilter\">{{ emptyFilterMessageText }}</slot>\n                                    </li>\n                                    <li v-else-if=\"!options || (options && options.length === 0)\" :class=\"cx('emptyMessage')\" role=\"option\" v-bind=\"ptm('emptyMessage')\">\n                                        <slot name=\"empty\">{{ emptyMessageText }}</slot>\n                                    </li>\n                                </ul>\n                            </template>\n                            <template v-if=\"$slots.loader\" v-slot:loader=\"{ options }\">\n                                <slot name=\"loader\" :options=\"options\"></slot>\n                            </template>\n                        </VirtualScroller>\n                    </div>\n                    <slot name=\"footer\" :value=\"d_value\" :options=\"visibleOptions\"></slot>\n                    <span v-if=\"!options || (options && options.length === 0)\" role=\"status\" aria-live=\"polite\" class=\"p-hidden-accessible\" v-bind=\"ptm('hiddenEmptyMessage')\" :data-p-hidden-accessible=\"true\">\n                        {{ emptyMessageText }}\n                    </span>\n                    <span role=\"status\" aria-live=\"polite\" class=\"p-hidden-accessible\" v-bind=\"ptm('hiddenSelectedMessage')\" :data-p-hidden-accessible=\"true\">\n                        {{ selectedMessageText }}\n                    </span>\n                    <span\n                        ref=\"lastHiddenFocusableElementOnOverlay\"\n                        role=\"presentation\"\n                        aria-hidden=\"true\"\n                        class=\"p-hidden-accessible p-hidden-focusable\"\n                        :tabindex=\"0\"\n                        @focus=\"onLastHiddenFocus\"\n                        v-bind=\"ptm('hiddenLastFocusableEl')\"\n                        :data-p-hidden-accessible=\"true\"\n                        :data-p-hidden-focusable=\"true\"\n                    ></span>\n                </div>\n            </transition>\n        </Portal>\n    </div>\n</template>\n\n<script>\nimport { cn } from '@primeuix/utils';\nimport { absolutePosition, addStyle, findSingle, focus, getFirstFocusableElement, getFocusableElements, getLastFocusableElement, getOuterWidth, isTouchDevice, relativePosition } from '@primeuix/utils/dom';\nimport { equals, findLastIndex, isEmpty, isNotEmpty, isPrintableCharacter, resolveFieldData } from '@primeuix/utils/object';\nimport { ZIndex } from '@primeuix/utils/zindex';\nimport { FilterService } from '@primevue/core/api';\nimport { ConnectedOverlayScrollHandler } from '@primevue/core/utils';\nimport CheckIcon from '@primevue/icons/check';\nimport ChevronDownIcon from '@primevue/icons/chevrondown';\nimport SearchIcon from '@primevue/icons/search';\nimport SpinnerIcon from '@primevue/icons/spinner';\nimport TimesIcon from '@primevue/icons/times';\nimport Checkbox from 'primevue/checkbox';\nimport Chip from 'primevue/chip';\nimport IconField from 'primevue/iconfield';\nimport InputIcon from 'primevue/inputicon';\nimport InputText from 'primevue/inputtext';\nimport OverlayEventBus from 'primevue/overlayeventbus';\nimport Portal from 'primevue/portal';\nimport Ripple from 'primevue/ripple';\nimport VirtualScroller from 'primevue/virtualscroller';\nimport BaseMultiSelect from './BaseMultiSelect.vue';\n\nexport default {\n    name: 'MultiSelect',\n    extends: BaseMultiSelect,\n    inheritAttrs: false,\n    emits: ['change', 'focus', 'blur', 'before-show', 'before-hide', 'show', 'hide', 'filter', 'selectall-change'],\n    inject: {\n        $pcFluid: { default: null }\n    },\n    outsideClickListener: null,\n    scrollHandler: null,\n    resizeListener: null,\n    overlay: null,\n    list: null,\n    virtualScroller: null,\n    startRangeIndex: -1,\n    searchTimeout: null,\n    searchValue: '',\n    selectOnFocus: false,\n    data() {\n        return {\n            clicked: false,\n            focused: false,\n            focusedOptionIndex: -1,\n            filterValue: null,\n            overlayVisible: false\n        };\n    },\n    watch: {\n        options() {\n            this.autoUpdateModel();\n        }\n    },\n    mounted() {\n        this.autoUpdateModel();\n    },\n    beforeUnmount() {\n        this.unbindOutsideClickListener();\n        this.unbindResizeListener();\n\n        if (this.scrollHandler) {\n            this.scrollHandler.destroy();\n            this.scrollHandler = null;\n        }\n\n        if (this.overlay) {\n            ZIndex.clear(this.overlay);\n            this.overlay = null;\n        }\n    },\n    methods: {\n        getOptionIndex(index, fn) {\n            return this.virtualScrollerDisabled ? index : fn && fn(index)['index'];\n        },\n        getOptionLabel(option) {\n            return this.optionLabel ? resolveFieldData(option, this.optionLabel) : option;\n        },\n        getOptionValue(option) {\n            return this.optionValue ? resolveFieldData(option, this.optionValue) : option;\n        },\n        getOptionRenderKey(option, index) {\n            return this.dataKey ? resolveFieldData(option, this.dataKey) : this.getOptionLabel(option) + `_${index}`;\n        },\n        getHeaderCheckboxPTOptions(key) {\n            return this.ptm(key, {\n                context: {\n                    selected: this.allSelected\n                }\n            });\n        },\n        getCheckboxPTOptions(option, itemOptions, index, key) {\n            return this.ptm(key, {\n                context: {\n                    selected: this.isSelected(option),\n                    focused: this.focusedOptionIndex === this.getOptionIndex(index, itemOptions),\n                    disabled: this.isOptionDisabled(option)\n                }\n            });\n        },\n        isOptionDisabled(option) {\n            if (this.maxSelectionLimitReached && !this.isSelected(option)) {\n                return true;\n            }\n\n            return this.optionDisabled ? resolveFieldData(option, this.optionDisabled) : false;\n        },\n        isOptionGroup(option) {\n            return this.optionGroupLabel && option.optionGroup && option.group;\n        },\n        getOptionGroupLabel(optionGroup) {\n            return resolveFieldData(optionGroup, this.optionGroupLabel);\n        },\n        getOptionGroupChildren(optionGroup) {\n            return resolveFieldData(optionGroup, this.optionGroupChildren);\n        },\n        getAriaPosInset(index) {\n            return (this.optionGroupLabel ? index - this.visibleOptions.slice(0, index).filter((option) => this.isOptionGroup(option)).length : index) + 1;\n        },\n        show(isFocus) {\n            this.$emit('before-show');\n            this.overlayVisible = true;\n            this.focusedOptionIndex = this.focusedOptionIndex !== -1 ? this.focusedOptionIndex : this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : this.findSelectedOptionIndex();\n\n            isFocus && focus(this.$refs.focusInput);\n        },\n        hide(isFocus) {\n            const _hide = () => {\n                this.$emit('before-hide');\n                this.overlayVisible = false;\n                this.clicked = false;\n                this.focusedOptionIndex = -1;\n                this.searchValue = '';\n\n                this.resetFilterOnHide && (this.filterValue = null);\n                isFocus && focus(this.$refs.focusInput);\n            };\n\n            setTimeout(() => {\n                _hide();\n            }, 0); // For ScreenReaders\n        },\n        onFocus(event) {\n            if (this.disabled) {\n                // For ScreenReaders\n                return;\n            }\n\n            this.focused = true;\n\n            if (this.overlayVisible) {\n                this.focusedOptionIndex = this.focusedOptionIndex !== -1 ? this.focusedOptionIndex : this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : this.findSelectedOptionIndex();\n                !this.autoFilterFocus && this.scrollInView(this.focusedOptionIndex);\n            }\n\n            this.$emit('focus', event);\n        },\n        onBlur(event) {\n            this.clicked = false;\n            this.focused = false;\n            this.focusedOptionIndex = -1;\n            this.searchValue = '';\n            this.$emit('blur', event);\n            this.formField.onBlur?.();\n        },\n        onKeyDown(event) {\n            if (this.disabled) {\n                event.preventDefault();\n\n                return;\n            }\n\n            const metaKey = event.metaKey || event.ctrlKey;\n\n            switch (event.code) {\n                case 'ArrowDown':\n                    this.onArrowDownKey(event);\n                    break;\n\n                case 'ArrowUp':\n                    this.onArrowUpKey(event);\n                    break;\n\n                case 'Home':\n                    this.onHomeKey(event);\n                    break;\n\n                case 'End':\n                    this.onEndKey(event);\n                    break;\n\n                case 'PageDown':\n                    this.onPageDownKey(event);\n                    break;\n\n                case 'PageUp':\n                    this.onPageUpKey(event);\n                    break;\n\n                case 'Enter':\n                case 'NumpadEnter':\n                case 'Space':\n                    this.onEnterKey(event);\n                    break;\n\n                case 'Escape':\n                    this.onEscapeKey(event);\n                    break;\n\n                case 'Tab':\n                    this.onTabKey(event);\n                    break;\n\n                case 'ShiftLeft':\n                case 'ShiftRight':\n                    this.onShiftKey(event);\n                    break;\n\n                default:\n                    if (event.code === 'KeyA' && metaKey) {\n                        const value = this.visibleOptions.filter((option) => this.isValidOption(option)).map((option) => this.getOptionValue(option));\n\n                        this.updateModel(event, value);\n\n                        event.preventDefault();\n                        break;\n                    }\n\n                    if (!metaKey && isPrintableCharacter(event.key)) {\n                        !this.overlayVisible && this.show();\n                        this.searchOptions(event);\n                        event.preventDefault();\n                    }\n\n                    break;\n            }\n\n            this.clicked = false;\n        },\n        onContainerClick(event) {\n            if (this.disabled || this.loading) {\n                return;\n            }\n\n            if (event.target.tagName === 'INPUT' || event.target.getAttribute('data-pc-section') === 'clearicon' || event.target.closest('[data-pc-section=\"clearicon\"]')) {\n                return;\n            } else if (!this.overlay || !this.overlay.contains(event.target)) {\n                this.overlayVisible ? this.hide(true) : this.show(true);\n            }\n\n            this.clicked = true;\n        },\n        onClearClick(event) {\n            this.updateModel(event, null);\n            this.resetFilterOnClear && (this.filterValue = null);\n        },\n        onFirstHiddenFocus(event) {\n            const focusableEl = event.relatedTarget === this.$refs.focusInput ? getFirstFocusableElement(this.overlay, ':not([data-p-hidden-focusable=\"true\"])') : this.$refs.focusInput;\n\n            focus(focusableEl);\n        },\n        onLastHiddenFocus(event) {\n            const focusableEl = event.relatedTarget === this.$refs.focusInput ? getLastFocusableElement(this.overlay, ':not([data-p-hidden-focusable=\"true\"])') : this.$refs.focusInput;\n\n            focus(focusableEl);\n        },\n        onOptionSelect(event, option, index = -1, isFocus = false) {\n            if (this.disabled || this.isOptionDisabled(option)) {\n                return;\n            }\n\n            let selected = this.isSelected(option);\n            let value = null;\n            const _value = this.getOptionValue(option) !== '' ? this.getOptionValue(option) : this.getOptionLabel(option);\n\n            if (selected) value = this.d_value.filter((val) => !equals(val, _value, this.equalityKey));\n            else value = [...(this.d_value || []), _value];\n\n            this.updateModel(event, value);\n            index !== -1 && (this.focusedOptionIndex = index);\n            isFocus && focus(this.$refs.focusInput);\n        },\n        onOptionMouseMove(event, index) {\n            if (this.focusOnHover) {\n                this.changeFocusedOptionIndex(event, index);\n            }\n        },\n        onOptionSelectRange(event, start = -1, end = -1) {\n            start === -1 && (start = this.findNearestSelectedOptionIndex(end, true));\n            end === -1 && (end = this.findNearestSelectedOptionIndex(start));\n\n            if (start !== -1 && end !== -1) {\n                const rangeStart = Math.min(start, end);\n                const rangeEnd = Math.max(start, end);\n                const value = this.visibleOptions\n                    .slice(rangeStart, rangeEnd + 1)\n                    .filter((option) => this.isValidOption(option))\n                    .map((option) => this.getOptionValue(option));\n\n                this.updateModel(event, value);\n            }\n        },\n        onFilterChange(event) {\n            const value = event.target.value;\n\n            this.filterValue = value;\n            this.focusedOptionIndex = -1;\n            this.$emit('filter', { originalEvent: event, value });\n\n            !this.virtualScrollerDisabled && this.virtualScroller.scrollToIndex(0);\n        },\n        onFilterKeyDown(event) {\n            switch (event.code) {\n                case 'ArrowDown':\n                    this.onArrowDownKey(event);\n                    break;\n\n                case 'ArrowUp':\n                    this.onArrowUpKey(event, true);\n                    break;\n\n                case 'ArrowLeft':\n                case 'ArrowRight':\n                    this.onArrowLeftKey(event, true);\n                    break;\n\n                case 'Home':\n                    this.onHomeKey(event, true);\n                    break;\n\n                case 'End':\n                    this.onEndKey(event, true);\n                    break;\n\n                case 'Enter':\n                case 'NumpadEnter':\n                    this.onEnterKey(event);\n                    break;\n\n                case 'Escape':\n                    this.onEscapeKey(event);\n                    break;\n\n                case 'Tab':\n                    this.onTabKey(event, true);\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onFilterBlur() {\n            this.focusedOptionIndex = -1;\n        },\n        onFilterUpdated() {\n            if (this.overlayVisible) {\n                this.alignOverlay();\n            }\n        },\n        onOverlayClick(event) {\n            OverlayEventBus.emit('overlay-click', {\n                originalEvent: event,\n                target: this.$el\n            });\n        },\n        onOverlayKeyDown(event) {\n            switch (event.code) {\n                case 'Escape':\n                    this.onEscapeKey(event);\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onArrowDownKey(event) {\n            if (!this.overlayVisible) {\n                this.show();\n            } else {\n                const optionIndex = this.focusedOptionIndex !== -1 ? this.findNextOptionIndex(this.focusedOptionIndex) : this.clicked ? this.findFirstOptionIndex() : this.findFirstFocusedOptionIndex();\n\n                if (event.shiftKey) {\n                    this.onOptionSelectRange(event, this.startRangeIndex, optionIndex);\n                }\n\n                this.changeFocusedOptionIndex(event, optionIndex);\n            }\n\n            event.preventDefault();\n        },\n        onArrowUpKey(event, pressedInInputText = false) {\n            if (event.altKey && !pressedInInputText) {\n                if (this.focusedOptionIndex !== -1) {\n                    this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n                }\n\n                this.overlayVisible && this.hide();\n                event.preventDefault();\n            } else {\n                const optionIndex = this.focusedOptionIndex !== -1 ? this.findPrevOptionIndex(this.focusedOptionIndex) : this.clicked ? this.findLastOptionIndex() : this.findLastFocusedOptionIndex();\n\n                if (event.shiftKey) {\n                    this.onOptionSelectRange(event, optionIndex, this.startRangeIndex);\n                }\n\n                this.changeFocusedOptionIndex(event, optionIndex);\n\n                !this.overlayVisible && this.show();\n                event.preventDefault();\n            }\n        },\n        onArrowLeftKey(event, pressedInInputText = false) {\n            pressedInInputText && (this.focusedOptionIndex = -1);\n        },\n        onHomeKey(event, pressedInInputText = false) {\n            if (pressedInInputText) {\n                const target = event.currentTarget;\n\n                if (event.shiftKey) {\n                    target.setSelectionRange(0, event.target.selectionStart);\n                } else {\n                    target.setSelectionRange(0, 0);\n                    this.focusedOptionIndex = -1;\n                }\n            } else {\n                let metaKey = event.metaKey || event.ctrlKey;\n                let optionIndex = this.findFirstOptionIndex();\n\n                if (event.shiftKey && metaKey) {\n                    this.onOptionSelectRange(event, optionIndex, this.startRangeIndex);\n                }\n\n                this.changeFocusedOptionIndex(event, optionIndex);\n\n                !this.overlayVisible && this.show();\n            }\n\n            event.preventDefault();\n        },\n        onEndKey(event, pressedInInputText = false) {\n            if (pressedInInputText) {\n                const target = event.currentTarget;\n\n                if (event.shiftKey) {\n                    target.setSelectionRange(event.target.selectionStart, target.value.length);\n                } else {\n                    const len = target.value.length;\n\n                    target.setSelectionRange(len, len);\n                    this.focusedOptionIndex = -1;\n                }\n            } else {\n                let metaKey = event.metaKey || event.ctrlKey;\n                let optionIndex = this.findLastOptionIndex();\n\n                if (event.shiftKey && metaKey) {\n                    this.onOptionSelectRange(event, this.startRangeIndex, optionIndex);\n                }\n\n                this.changeFocusedOptionIndex(event, optionIndex);\n\n                !this.overlayVisible && this.show();\n            }\n\n            event.preventDefault();\n        },\n        onPageUpKey(event) {\n            this.scrollInView(0);\n            event.preventDefault();\n        },\n        onPageDownKey(event) {\n            this.scrollInView(this.visibleOptions.length - 1);\n            event.preventDefault();\n        },\n        onEnterKey(event) {\n            if (!this.overlayVisible) {\n                this.focusedOptionIndex = -1; // reset\n                this.onArrowDownKey(event);\n            } else {\n                if (this.focusedOptionIndex !== -1) {\n                    if (event.shiftKey) this.onOptionSelectRange(event, this.focusedOptionIndex);\n                    else this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n                }\n            }\n\n            event.preventDefault();\n        },\n        onEscapeKey(event) {\n            if (this.overlayVisible) {\n                this.hide(true);\n                event.stopPropagation();\n            }\n\n            event.preventDefault();\n        },\n        onTabKey(event, pressedInInputText = false) {\n            if (!pressedInInputText) {\n                if (this.overlayVisible && this.hasFocusableElements()) {\n                    focus(event.shiftKey ? this.$refs.lastHiddenFocusableElementOnOverlay : this.$refs.firstHiddenFocusableElementOnOverlay);\n\n                    event.preventDefault();\n                } else {\n                    if (this.focusedOptionIndex !== -1) {\n                        this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n                    }\n\n                    this.overlayVisible && this.hide(this.filter);\n                }\n            }\n        },\n        onShiftKey() {\n            this.startRangeIndex = this.focusedOptionIndex;\n        },\n        onOverlayEnter(el) {\n            ZIndex.set('overlay', el, this.$primevue.config.zIndex.overlay);\n\n            addStyle(el, { position: 'absolute', top: '0' });\n            this.alignOverlay();\n            this.scrollInView();\n\n            this.autoFilterFocus && focus(this.$refs.filterInput.$el);\n            this.autoUpdateModel();\n\n            // Issue: #7508\n            this.$attrSelector && el.setAttribute(this.$attrSelector, '');\n        },\n        onOverlayAfterEnter() {\n            this.bindOutsideClickListener();\n            this.bindScrollListener();\n            this.bindResizeListener();\n\n            this.$emit('show');\n        },\n        onOverlayLeave() {\n            this.unbindOutsideClickListener();\n            this.unbindScrollListener();\n            this.unbindResizeListener();\n\n            this.$emit('hide');\n            this.overlay = null;\n        },\n        onOverlayAfterLeave(el) {\n            ZIndex.clear(el);\n        },\n        alignOverlay() {\n            if (this.appendTo === 'self') {\n                relativePosition(this.overlay, this.$el);\n            } else {\n                this.overlay.style.minWidth = getOuterWidth(this.$el) + 'px';\n                absolutePosition(this.overlay, this.$el);\n            }\n        },\n        bindOutsideClickListener() {\n            if (!this.outsideClickListener) {\n                this.outsideClickListener = (event) => {\n                    if (this.overlayVisible && this.isOutsideClicked(event)) {\n                        this.hide();\n                    }\n                };\n\n                document.addEventListener('click', this.outsideClickListener, true);\n            }\n        },\n        unbindOutsideClickListener() {\n            if (this.outsideClickListener) {\n                document.removeEventListener('click', this.outsideClickListener, true);\n                this.outsideClickListener = null;\n            }\n        },\n        bindScrollListener() {\n            if (!this.scrollHandler) {\n                this.scrollHandler = new ConnectedOverlayScrollHandler(this.$refs.container, () => {\n                    if (this.overlayVisible) {\n                        this.hide();\n                    }\n                });\n            }\n\n            this.scrollHandler.bindScrollListener();\n        },\n        unbindScrollListener() {\n            if (this.scrollHandler) {\n                this.scrollHandler.unbindScrollListener();\n            }\n        },\n        bindResizeListener() {\n            if (!this.resizeListener) {\n                this.resizeListener = () => {\n                    if (this.overlayVisible && !isTouchDevice()) {\n                        this.hide();\n                    }\n                };\n\n                window.addEventListener('resize', this.resizeListener);\n            }\n        },\n        unbindResizeListener() {\n            if (this.resizeListener) {\n                window.removeEventListener('resize', this.resizeListener);\n                this.resizeListener = null;\n            }\n        },\n        isOutsideClicked(event) {\n            return !(this.$el.isSameNode(event.target) || this.$el.contains(event.target) || (this.overlay && this.overlay.contains(event.target)));\n        },\n        getLabelByValue(value) {\n            const options = this.optionGroupLabel ? this.flatOptions(this.options) : this.options || [];\n            const matchedOption = options.find((option) => !this.isOptionGroup(option) && equals(this.getOptionValue(option) !== '' ? this.getOptionValue(option) : this.getOptionLabel(option), value, this.equalityKey));\n\n            return matchedOption ? this.getOptionLabel(matchedOption) : null;\n        },\n        getSelectedItemsLabel() {\n            let pattern = /{(.*?)}/;\n            const selectedItemsLabel = this.selectedItemsLabel || this.$primevue.config.locale.selectionMessage;\n\n            if (pattern.test(selectedItemsLabel)) {\n                return selectedItemsLabel.replace(selectedItemsLabel.match(pattern)[0], this.d_value.length + '');\n            }\n\n            return selectedItemsLabel;\n        },\n        onToggleAll(event) {\n            if (this.selectAll !== null) {\n                this.$emit('selectall-change', { originalEvent: event, checked: !this.allSelected });\n            } else {\n                const value = this.allSelected ? [] : this.visibleOptions.filter((option) => this.isValidOption(option)).map((option) => this.getOptionValue(option));\n\n                this.updateModel(event, value);\n            }\n        },\n        removeOption(event, optionValue) {\n            event.stopPropagation();\n            let value = this.d_value.filter((val) => !equals(val, optionValue, this.equalityKey));\n\n            this.updateModel(event, value);\n        },\n        clearFilter() {\n            this.filterValue = null;\n        },\n        hasFocusableElements() {\n            return getFocusableElements(this.overlay, ':not([data-p-hidden-focusable=\"true\"])').length > 0;\n        },\n        isOptionMatched(option) {\n            return this.isValidOption(option) && typeof this.getOptionLabel(option) === 'string' && this.getOptionLabel(option)?.toLocaleLowerCase(this.filterLocale).startsWith(this.searchValue.toLocaleLowerCase(this.filterLocale));\n        },\n        isValidOption(option) {\n            return isNotEmpty(option) && !(this.isOptionDisabled(option) || this.isOptionGroup(option));\n        },\n        isValidSelectedOption(option) {\n            return this.isValidOption(option) && this.isSelected(option);\n        },\n        isEquals(value1, value2) {\n            return equals(value1, value2, this.equalityKey);\n        },\n        isSelected(option) {\n            const optionValue = this.getOptionValue(option) !== '' ? this.getOptionValue(option) : this.getOptionLabel(option);\n\n            return (this.d_value || []).some((value) => this.isEquals(value, optionValue));\n        },\n        findFirstOptionIndex() {\n            return this.visibleOptions.findIndex((option) => this.isValidOption(option));\n        },\n        findLastOptionIndex() {\n            return findLastIndex(this.visibleOptions, (option) => this.isValidOption(option));\n        },\n        findNextOptionIndex(index) {\n            const matchedOptionIndex = index < this.visibleOptions.length - 1 ? this.visibleOptions.slice(index + 1).findIndex((option) => this.isValidOption(option)) : -1;\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex + index + 1 : index;\n        },\n        findPrevOptionIndex(index) {\n            const matchedOptionIndex = index > 0 ? findLastIndex(this.visibleOptions.slice(0, index), (option) => this.isValidOption(option)) : -1;\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex : index;\n        },\n        findSelectedOptionIndex() {\n            if (this.$filled) {\n                for (let index = this.d_value.length - 1; index >= 0; index--) {\n                    const value = this.d_value[index];\n                    const matchedOptionIndex = this.visibleOptions.findIndex((option) => this.isValidSelectedOption(option) && this.isEquals(value, this.getOptionValue(option)));\n\n                    if (matchedOptionIndex > -1) return matchedOptionIndex;\n                }\n            }\n\n            return -1;\n        },\n        findFirstSelectedOptionIndex() {\n            return this.$filled ? this.visibleOptions.findIndex((option) => this.isValidSelectedOption(option)) : -1;\n        },\n        findLastSelectedOptionIndex() {\n            return this.$filled ? findLastIndex(this.visibleOptions, (option) => this.isValidSelectedOption(option)) : -1;\n        },\n        findNextSelectedOptionIndex(index) {\n            const matchedOptionIndex = this.$filled && index < this.visibleOptions.length - 1 ? this.visibleOptions.slice(index + 1).findIndex((option) => this.isValidSelectedOption(option)) : -1;\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex + index + 1 : -1;\n        },\n        findPrevSelectedOptionIndex(index) {\n            const matchedOptionIndex = this.$filled && index > 0 ? findLastIndex(this.visibleOptions.slice(0, index), (option) => this.isValidSelectedOption(option)) : -1;\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex : -1;\n        },\n        findNearestSelectedOptionIndex(index, firstCheckUp = false) {\n            let matchedOptionIndex = -1;\n\n            if (this.$filled) {\n                if (firstCheckUp) {\n                    matchedOptionIndex = this.findPrevSelectedOptionIndex(index);\n                    matchedOptionIndex = matchedOptionIndex === -1 ? this.findNextSelectedOptionIndex(index) : matchedOptionIndex;\n                } else {\n                    matchedOptionIndex = this.findNextSelectedOptionIndex(index);\n                    matchedOptionIndex = matchedOptionIndex === -1 ? this.findPrevSelectedOptionIndex(index) : matchedOptionIndex;\n                }\n            }\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex : index;\n        },\n        findFirstFocusedOptionIndex() {\n            const selectedIndex = this.findFirstSelectedOptionIndex();\n\n            return selectedIndex < 0 ? this.findFirstOptionIndex() : selectedIndex;\n        },\n        findLastFocusedOptionIndex() {\n            const selectedIndex = this.findSelectedOptionIndex();\n\n            return selectedIndex < 0 ? this.findLastOptionIndex() : selectedIndex;\n        },\n        searchOptions(event) {\n            this.searchValue = (this.searchValue || '') + event.key;\n\n            let optionIndex = -1;\n\n            if (isNotEmpty(this.searchValue)) {\n                if (this.focusedOptionIndex !== -1) {\n                    optionIndex = this.visibleOptions.slice(this.focusedOptionIndex).findIndex((option) => this.isOptionMatched(option));\n                    optionIndex = optionIndex === -1 ? this.visibleOptions.slice(0, this.focusedOptionIndex).findIndex((option) => this.isOptionMatched(option)) : optionIndex + this.focusedOptionIndex;\n                } else {\n                    optionIndex = this.visibleOptions.findIndex((option) => this.isOptionMatched(option));\n                }\n\n                if (optionIndex === -1 && this.focusedOptionIndex === -1) {\n                    optionIndex = this.findFirstFocusedOptionIndex();\n                }\n\n                if (optionIndex !== -1) {\n                    this.changeFocusedOptionIndex(event, optionIndex);\n                }\n            }\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(() => {\n                this.searchValue = '';\n                this.searchTimeout = null;\n            }, 500);\n        },\n        changeFocusedOptionIndex(event, index) {\n            if (this.focusedOptionIndex !== index) {\n                this.focusedOptionIndex = index;\n                this.scrollInView();\n\n                if (this.selectOnFocus) {\n                    this.onOptionSelect(event, this.visibleOptions[index]);\n                }\n            }\n        },\n        scrollInView(index = -1) {\n            this.$nextTick(() => {\n                const id = index !== -1 ? `${this.$id}_${index}` : this.focusedOptionId;\n                const element = findSingle(this.list, `li[id=\"${id}\"]`);\n\n                if (element) {\n                    element.scrollIntoView && element.scrollIntoView({ block: 'nearest', inline: 'nearest' });\n                } else if (!this.virtualScrollerDisabled) {\n                    this.virtualScroller && this.virtualScroller.scrollToIndex(index !== -1 ? index : this.focusedOptionIndex);\n                }\n            });\n        },\n        autoUpdateModel() {\n            if (this.autoOptionFocus) {\n                this.focusedOptionIndex = this.findFirstFocusedOptionIndex();\n            }\n\n            if (this.selectOnFocus && this.autoOptionFocus && !this.$filled) {\n                const value = this.getOptionValue(this.visibleOptions[this.focusedOptionIndex]);\n\n                this.updateModel(null, [value]);\n            }\n        },\n        updateModel(event, value) {\n            this.writeValue(value, event);\n            this.$emit('change', { originalEvent: event, value });\n        },\n        flatOptions(options) {\n            return (options || []).reduce((result, option, index) => {\n                result.push({ optionGroup: option, group: true, index });\n\n                const optionGroupChildren = this.getOptionGroupChildren(option);\n\n                optionGroupChildren && optionGroupChildren.forEach((o) => result.push(o));\n\n                return result;\n            }, []);\n        },\n        overlayRef(el) {\n            this.overlay = el;\n        },\n        listRef(el, contentRef) {\n            this.list = el;\n            contentRef && contentRef(el); // For VirtualScroller\n        },\n        virtualScrollerRef(el) {\n            this.virtualScroller = el;\n        }\n    },\n    computed: {\n        visibleOptions() {\n            const options = this.optionGroupLabel ? this.flatOptions(this.options) : this.options || [];\n\n            if (this.filterValue) {\n                const filteredOptions = FilterService.filter(options, this.searchFields, this.filterValue, this.filterMatchMode, this.filterLocale);\n\n                if (this.optionGroupLabel) {\n                    const optionGroups = this.options || [];\n                    const filtered = [];\n\n                    optionGroups.forEach((group) => {\n                        const groupChildren = this.getOptionGroupChildren(group);\n                        const filteredItems = groupChildren.filter((item) => filteredOptions.includes(item));\n\n                        if (filteredItems.length > 0) filtered.push({ ...group, [typeof this.optionGroupChildren === 'string' ? this.optionGroupChildren : 'items']: [...filteredItems] });\n                    });\n\n                    return this.flatOptions(filtered);\n                }\n\n                return filteredOptions;\n            }\n\n            return options;\n        },\n        label() {\n            // TODO: Refactor\n            let label;\n\n            if (this.d_value && this.d_value.length) {\n                if (isNotEmpty(this.maxSelectedLabels) && this.d_value.length > this.maxSelectedLabels) {\n                    return this.getSelectedItemsLabel();\n                } else {\n                    label = '';\n\n                    for (let i = 0; i < this.d_value.length; i++) {\n                        if (i !== 0) {\n                            label += ', ';\n                        }\n\n                        label += this.getLabelByValue(this.d_value[i]);\n                    }\n                }\n            } else {\n                label = this.placeholder;\n            }\n\n            return label;\n        },\n        chipSelectedItems() {\n            return isNotEmpty(this.maxSelectedLabels) && this.d_value && this.d_value.length > this.maxSelectedLabels;\n        },\n        allSelected() {\n            return this.selectAll !== null ? this.selectAll : isNotEmpty(this.visibleOptions) && this.visibleOptions.every((option) => this.isOptionGroup(option) || this.isOptionDisabled(option) || this.isSelected(option));\n        },\n        // @deprecated use $filled instead.\n        hasSelectedOption() {\n            return this.$filled;\n        },\n        equalityKey() {\n            return this.optionValue ? null : this.dataKey;\n        },\n        searchFields() {\n            return this.filterFields || [this.optionLabel];\n        },\n        maxSelectionLimitReached() {\n            return this.selectionLimit && this.d_value && this.d_value.length === this.selectionLimit;\n        },\n        filterResultMessageText() {\n            return isNotEmpty(this.visibleOptions) ? this.filterMessageText.replaceAll('{0}', this.visibleOptions.length) : this.emptyFilterMessageText;\n        },\n        filterMessageText() {\n            return this.filterMessage || this.$primevue.config.locale.searchMessage || '';\n        },\n        emptyFilterMessageText() {\n            return this.emptyFilterMessage || this.$primevue.config.locale.emptySearchMessage || this.$primevue.config.locale.emptyFilterMessage || '';\n        },\n        emptyMessageText() {\n            return this.emptyMessage || this.$primevue.config.locale.emptyMessage || '';\n        },\n        selectionMessageText() {\n            return this.selectionMessage || this.$primevue.config.locale.selectionMessage || '';\n        },\n        emptySelectionMessageText() {\n            return this.emptySelectionMessage || this.$primevue.config.locale.emptySelectionMessage || '';\n        },\n        selectedMessageText() {\n            return this.$filled ? this.selectionMessageText.replaceAll('{0}', this.d_value.length) : this.emptySelectionMessageText;\n        },\n        focusedOptionId() {\n            return this.focusedOptionIndex !== -1 ? `${this.$id}_${this.focusedOptionIndex}` : null;\n        },\n        ariaSetSize() {\n            return this.visibleOptions.filter((option) => !this.isOptionGroup(option)).length;\n        },\n        toggleAllAriaLabel() {\n            return this.$primevue.config.locale.aria ? this.$primevue.config.locale.aria[this.allSelected ? 'selectAll' : 'unselectAll'] : undefined;\n        },\n        listAriaLabel() {\n            return this.$primevue.config.locale.aria ? this.$primevue.config.locale.aria.listLabel : undefined;\n        },\n        virtualScrollerDisabled() {\n            return !this.virtualScrollerOptions;\n        },\n        hasFluid() {\n            return isEmpty(this.fluid) ? !!this.$pcFluid : this.fluid;\n        },\n        isClearIconVisible() {\n            return this.showClear && this.d_value && this.d_value.length && this.d_value != null && isNotEmpty(this.options);\n        },\n        containerDataP() {\n            return cn({\n                invalid: this.$invalid,\n                disabled: this.disabled,\n                focus: this.focused,\n                fluid: this.$fluid,\n                filled: this.$variant === 'filled',\n                [this.size]: this.size\n            });\n        },\n        labelDataP() {\n            return cn({\n                placeholder: this.label === this.placeholder,\n                clearable: this.showClear,\n                disabled: this.disabled,\n                [this.size]: this.size,\n                'has-chip': this.display === 'chip' && this.d_value && this.d_value.length && (this.maxSelectedLabels ? this.d_value.length <= this.maxSelectedLabels : true),\n                empty: !this.placeholder && !this.$filled\n            });\n        },\n        dropdownIconDataP() {\n            return cn({\n                [this.size]: this.size\n            });\n        },\n        overlayDataP() {\n            return cn({\n                ['portal-' + this.appendTo]: 'portal-' + this.appendTo\n            });\n        }\n    },\n    directives: {\n        ripple: Ripple\n    },\n    components: {\n        InputText,\n        Checkbox,\n        VirtualScroller,\n        Portal,\n        Chip,\n        IconField,\n        InputIcon,\n        TimesIcon,\n        SearchIcon,\n        ChevronDownIcon,\n        SpinnerIcon,\n        CheckIcon\n    }\n};\n</script>\n","<template>\n    <div ref=\"container\" :class=\"cx('root')\" :style=\"sx('root')\" @click=\"onContainerClick\" :data-p=\"containerDataP\" v-bind=\"ptmi('root')\">\n        <div class=\"p-hidden-accessible\" v-bind=\"ptm('hiddenInputContainer')\" :data-p-hidden-accessible=\"true\">\n            <input\n                ref=\"focusInput\"\n                :id=\"inputId\"\n                type=\"text\"\n                readonly\n                :disabled=\"disabled\"\n                :placeholder=\"placeholder\"\n                :tabindex=\"!disabled ? tabindex : -1\"\n                role=\"combobox\"\n                :aria-label=\"ariaLabel\"\n                :aria-labelledby=\"ariaLabelledby\"\n                aria-haspopup=\"listbox\"\n                :aria-expanded=\"overlayVisible\"\n                :aria-controls=\"$id + '_list'\"\n                :aria-activedescendant=\"focused ? focusedOptionId : undefined\"\n                :aria-invalid=\"invalid || undefined\"\n                @focus=\"onFocus\"\n                @blur=\"onBlur\"\n                @keydown=\"onKeyDown\"\n                v-bind=\"ptm('hiddenInput')\"\n            />\n        </div>\n        <div :class=\"cx('labelContainer')\" v-bind=\"ptm('labelContainer')\">\n            <div :class=\"cx('label')\" :data-p=\"labelDataP\" v-bind=\"ptm('label')\">\n                <slot name=\"value\" :value=\"d_value\" :placeholder=\"placeholder\">\n                    <template v-if=\"display === 'comma'\">\n                        {{ label || 'empty' }}\n                    </template>\n                    <template v-else-if=\"display === 'chip'\">\n                        <template v-if=\"chipSelectedItems\">\n                            <span>{{ label }}</span>\n                        </template>\n                        <template v-else>\n                            <span v-for=\"item of d_value\" :key=\"getLabelByValue(item)\" :class=\"cx('chipItem')\" v-bind=\"ptm('chipItem')\">\n                                <slot name=\"chip\" :value=\"item\" :removeCallback=\"(event) => removeOption(event, item)\">\n                                    <!-- TODO: removetokenicon and removeTokenIcon  deprecated since v4.0. Use chipicon slot and chipIcon prop-->\n                                    <Chip :class=\"cx('pcChip')\" :label=\"getLabelByValue(item)\" :removeIcon=\"chipIcon || removeTokenIcon\" removable :unstyled=\"unstyled\" @remove=\"removeOption($event, item)\" :pt=\"ptm('pcChip')\">\n                                        <template #removeicon>\n                                            <slot :name=\"$slots.chipicon ? 'chipicon' : 'removetokenicon'\" :class=\"cx('chipIcon')\" :item=\"item\" :removeCallback=\"(event) => removeOption(event, item)\" />\n                                        </template>\n                                    </Chip>\n                                </slot>\n                            </span>\n                        </template>\n                        <template v-if=\"!d_value || d_value.length === 0\">{{ placeholder || 'empty' }}</template>\n                    </template>\n                </slot>\n            </div>\n        </div>\n        <slot v-if=\"isClearIconVisible\" name=\"clearicon\" :class=\"cx('clearIcon')\" :clearCallback=\"onClearClick\">\n            <component :is=\"clearIcon ? 'i' : 'TimesIcon'\" ref=\"clearIcon\" :class=\"[cx('clearIcon'), clearIcon]\" @click=\"onClearClick\" v-bind=\"ptm('clearIcon')\" data-pc-section=\"clearicon\" />\n        </slot>\n        <div :class=\"cx('dropdown')\" v-bind=\"ptm('dropdown')\">\n            <slot v-if=\"loading\" name=\"loadingicon\" :class=\"cx('loadingIcon')\">\n                <span v-if=\"loadingIcon\" :class=\"[cx('loadingIcon'), 'pi-spin', loadingIcon]\" aria-hidden=\"true\" v-bind=\"ptm('loadingIcon')\" />\n                <SpinnerIcon v-else :class=\"cx('loadingIcon')\" spin aria-hidden=\"true\" v-bind=\"ptm('loadingIcon')\" />\n            </slot>\n            <slot v-else name=\"dropdownicon\" :class=\"cx('dropdownIcon')\">\n                <component :is=\"dropdownIcon ? 'span' : 'ChevronDownIcon'\" :class=\"[cx('dropdownIcon'), dropdownIcon]\" aria-hidden=\"true\" :data-p=\"dropdownIconDataP\" v-bind=\"ptm('dropdownIcon')\" />\n            </slot>\n        </div>\n        <Portal :appendTo=\"appendTo\">\n            <transition name=\"p-connected-overlay\" @enter=\"onOverlayEnter\" @after-enter=\"onOverlayAfterEnter\" @leave=\"onOverlayLeave\" @after-leave=\"onOverlayAfterLeave\" v-bind=\"ptm('transition')\">\n                <div v-if=\"overlayVisible\" :ref=\"overlayRef\" :style=\"[panelStyle, overlayStyle]\" :class=\"[cx('overlay'), panelClass, overlayClass]\" @click=\"onOverlayClick\" @keydown=\"onOverlayKeyDown\" :data-p=\"overlayDataP\" v-bind=\"ptm('overlay')\">\n                    <span\n                        ref=\"firstHiddenFocusableElementOnOverlay\"\n                        role=\"presentation\"\n                        aria-hidden=\"true\"\n                        class=\"p-hidden-accessible p-hidden-focusable\"\n                        :tabindex=\"0\"\n                        @focus=\"onFirstHiddenFocus\"\n                        v-bind=\"ptm('hiddenFirstFocusableEl')\"\n                        :data-p-hidden-accessible=\"true\"\n                        :data-p-hidden-focusable=\"true\"\n                    ></span>\n                    <slot name=\"header\" :value=\"d_value\" :options=\"visibleOptions\"></slot>\n                    <div v-if=\"(showToggleAll && selectionLimit == null) || filter\" :class=\"cx('header')\" v-bind=\"ptm('header')\">\n                        <Checkbox\n                            v-if=\"showToggleAll && selectionLimit == null\"\n                            :modelValue=\"allSelected\"\n                            :binary=\"true\"\n                            :disabled=\"disabled\"\n                            :variant=\"variant\"\n                            :aria-label=\"toggleAllAriaLabel\"\n                            @change=\"onToggleAll\"\n                            :unstyled=\"unstyled\"\n                            :pt=\"getHeaderCheckboxPTOptions('pcHeaderCheckbox')\"\n                            :formControl=\"{ novalidate: true }\"\n                        >\n                            <template #icon=\"slotProps\">\n                                <component v-if=\"$slots.headercheckboxicon\" :is=\"$slots.headercheckboxicon\" :checked=\"slotProps.checked\" :class=\"slotProps.class\" />\n                                <component v-else-if=\"slotProps.checked\" :is=\"checkboxIcon ? 'span' : 'CheckIcon'\" :class=\"[slotProps.class, { [checkboxIcon]: slotProps.checked }]\" v-bind=\"getHeaderCheckboxPTOptions('pcHeaderCheckbox.icon')\" />\n                            </template>\n                        </Checkbox>\n                        <IconField v-if=\"filter\" :class=\"cx('pcFilterContainer')\" :unstyled=\"unstyled\" :pt=\"ptm('pcFilterContainer')\">\n                            <InputText\n                                ref=\"filterInput\"\n                                :value=\"filterValue\"\n                                @vue:mounted=\"onFilterUpdated\"\n                                @vue:updated=\"onFilterUpdated\"\n                                :class=\"cx('pcFilter')\"\n                                :placeholder=\"filterPlaceholder\"\n                                :disabled=\"disabled\"\n                                :variant=\"variant\"\n                                :unstyled=\"unstyled\"\n                                role=\"searchbox\"\n                                autocomplete=\"off\"\n                                :aria-owns=\"$id + '_list'\"\n                                :aria-activedescendant=\"focusedOptionId\"\n                                @keydown=\"onFilterKeyDown\"\n                                @blur=\"onFilterBlur\"\n                                @input=\"onFilterChange\"\n                                :pt=\"ptm('pcFilter')\"\n                                :formControl=\"{ novalidate: true }\"\n                            />\n                            <InputIcon :unstyled=\"unstyled\" :pt=\"ptm('pcFilterIconContainer')\">\n                                <slot name=\"filtericon\">\n                                    <span v-if=\"filterIcon\" :class=\"filterIcon\" v-bind=\"ptm('filterIcon')\" />\n                                    <SearchIcon v-else v-bind=\"ptm('filterIcon')\" />\n                                </slot>\n                            </InputIcon>\n                        </IconField>\n                        <span v-if=\"filter\" role=\"status\" aria-live=\"polite\" class=\"p-hidden-accessible\" v-bind=\"ptm('hiddenFilterResult')\" :data-p-hidden-accessible=\"true\">\n                            {{ filterResultMessageText }}\n                        </span>\n                    </div>\n                    <div :class=\"cx('listContainer')\" :style=\"{ 'max-height': virtualScrollerDisabled ? scrollHeight : '' }\" v-bind=\"ptm('listContainer')\">\n                        <VirtualScroller :ref=\"virtualScrollerRef\" v-bind=\"virtualScrollerOptions\" :items=\"visibleOptions\" :style=\"{ height: scrollHeight }\" :tabindex=\"-1\" :disabled=\"virtualScrollerDisabled\" :pt=\"ptm('virtualScroller')\">\n                            <template v-slot:content=\"{ styleClass, contentRef, items, getItemOptions, contentStyle, itemSize }\">\n                                <ul :ref=\"(el) => listRef(el, contentRef)\" :id=\"$id + '_list'\" :class=\"[cx('list'), styleClass]\" :style=\"contentStyle\" role=\"listbox\" aria-multiselectable=\"true\" :aria-label=\"listAriaLabel\" v-bind=\"ptm('list')\">\n                                    <template v-for=\"(option, i) of items\" :key=\"getOptionRenderKey(option, getOptionIndex(i, getItemOptions))\">\n                                        <li\n                                            v-if=\"isOptionGroup(option)\"\n                                            :id=\"$id + '_' + getOptionIndex(i, getItemOptions)\"\n                                            :style=\"{ height: itemSize ? itemSize + 'px' : undefined }\"\n                                            :class=\"cx('optionGroup')\"\n                                            role=\"option\"\n                                            v-bind=\"ptm('optionGroup')\"\n                                        >\n                                            <slot name=\"optiongroup\" :option=\"option.optionGroup\" :index=\"getOptionIndex(i, getItemOptions)\">{{ getOptionGroupLabel(option.optionGroup) }}</slot>\n                                        </li>\n                                        <li\n                                            v-else\n                                            :id=\"$id + '_' + getOptionIndex(i, getItemOptions)\"\n                                            v-ripple\n                                            :style=\"{ height: itemSize ? itemSize + 'px' : undefined }\"\n                                            :class=\"cx('option', { option, index: i, getItemOptions })\"\n                                            role=\"option\"\n                                            :aria-label=\"getOptionLabel(option)\"\n                                            :aria-selected=\"isSelected(option)\"\n                                            :aria-disabled=\"isOptionDisabled(option)\"\n                                            :aria-setsize=\"ariaSetSize\"\n                                            :aria-posinset=\"getAriaPosInset(getOptionIndex(i, getItemOptions))\"\n                                            @click=\"onOptionSelect($event, option, getOptionIndex(i, getItemOptions), true)\"\n                                            @mousemove=\"onOptionMouseMove($event, getOptionIndex(i, getItemOptions))\"\n                                            v-bind=\"getCheckboxPTOptions(option, getItemOptions, i, 'option')\"\n                                            :data-p-selected=\"isSelected(option)\"\n                                            :data-p-focused=\"focusedOptionIndex === getOptionIndex(i, getItemOptions)\"\n                                            :data-p-disabled=\"isOptionDisabled(option)\"\n                                        >\n                                            <Checkbox\n                                                :defaultValue=\"isSelected(option)\"\n                                                :binary=\"true\"\n                                                :tabindex=\"-1\"\n                                                :variant=\"variant\"\n                                                :unstyled=\"unstyled\"\n                                                :pt=\"getCheckboxPTOptions(option, getItemOptions, i, 'pcOptionCheckbox')\"\n                                                :formControl=\"{ novalidate: true }\"\n                                            >\n                                                <template #icon=\"slotProps\">\n                                                    <component v-if=\"$slots.optioncheckboxicon || $slots.itemcheckboxicon\" :is=\"$slots.optioncheckboxicon || $slots.itemcheckboxicon\" :checked=\"slotProps.checked\" :class=\"slotProps.class\" />\n                                                    <component\n                                                        v-else-if=\"slotProps.checked\"\n                                                        :is=\"checkboxIcon ? 'span' : 'CheckIcon'\"\n                                                        :class=\"[slotProps.class, { [checkboxIcon]: slotProps.checked }]\"\n                                                        v-bind=\"getCheckboxPTOptions(option, getItemOptions, i, 'pcOptionCheckbox.icon')\"\n                                                    />\n                                                </template>\n                                            </Checkbox>\n                                            <slot name=\"option\" :option=\"option\" :selected=\"isSelected(option)\" :index=\"getOptionIndex(i, getItemOptions)\">\n                                                <span v-bind=\"ptm('optionLabel')\">{{ getOptionLabel(option) }}</span>\n                                            </slot>\n                                        </li>\n                                    </template>\n                                    <li v-if=\"filterValue && (!items || (items && items.length === 0))\" :class=\"cx('emptyMessage')\" role=\"option\" v-bind=\"ptm('emptyMessage')\">\n                                        <slot name=\"emptyfilter\">{{ emptyFilterMessageText }}</slot>\n                                    </li>\n                                    <li v-else-if=\"!options || (options && options.length === 0)\" :class=\"cx('emptyMessage')\" role=\"option\" v-bind=\"ptm('emptyMessage')\">\n                                        <slot name=\"empty\">{{ emptyMessageText }}</slot>\n                                    </li>\n                                </ul>\n                            </template>\n                            <template v-if=\"$slots.loader\" v-slot:loader=\"{ options }\">\n                                <slot name=\"loader\" :options=\"options\"></slot>\n                            </template>\n                        </VirtualScroller>\n                    </div>\n                    <slot name=\"footer\" :value=\"d_value\" :options=\"visibleOptions\"></slot>\n                    <span v-if=\"!options || (options && options.length === 0)\" role=\"status\" aria-live=\"polite\" class=\"p-hidden-accessible\" v-bind=\"ptm('hiddenEmptyMessage')\" :data-p-hidden-accessible=\"true\">\n                        {{ emptyMessageText }}\n                    </span>\n                    <span role=\"status\" aria-live=\"polite\" class=\"p-hidden-accessible\" v-bind=\"ptm('hiddenSelectedMessage')\" :data-p-hidden-accessible=\"true\">\n                        {{ selectedMessageText }}\n                    </span>\n                    <span\n                        ref=\"lastHiddenFocusableElementOnOverlay\"\n                        role=\"presentation\"\n                        aria-hidden=\"true\"\n                        class=\"p-hidden-accessible p-hidden-focusable\"\n                        :tabindex=\"0\"\n                        @focus=\"onLastHiddenFocus\"\n                        v-bind=\"ptm('hiddenLastFocusableEl')\"\n                        :data-p-hidden-accessible=\"true\"\n                        :data-p-hidden-focusable=\"true\"\n                    ></span>\n                </div>\n            </transition>\n        </Portal>\n    </div>\n</template>\n\n<script>\nimport { cn } from '@primeuix/utils';\nimport { absolutePosition, addStyle, findSingle, focus, getFirstFocusableElement, getFocusableElements, getLastFocusableElement, getOuterWidth, isTouchDevice, relativePosition } from '@primeuix/utils/dom';\nimport { equals, findLastIndex, isEmpty, isNotEmpty, isPrintableCharacter, resolveFieldData } from '@primeuix/utils/object';\nimport { ZIndex } from '@primeuix/utils/zindex';\nimport { FilterService } from '@primevue/core/api';\nimport { ConnectedOverlayScrollHandler } from '@primevue/core/utils';\nimport CheckIcon from '@primevue/icons/check';\nimport ChevronDownIcon from '@primevue/icons/chevrondown';\nimport SearchIcon from '@primevue/icons/search';\nimport SpinnerIcon from '@primevue/icons/spinner';\nimport TimesIcon from '@primevue/icons/times';\nimport Checkbox from 'primevue/checkbox';\nimport Chip from 'primevue/chip';\nimport IconField from 'primevue/iconfield';\nimport InputIcon from 'primevue/inputicon';\nimport InputText from 'primevue/inputtext';\nimport OverlayEventBus from 'primevue/overlayeventbus';\nimport Portal from 'primevue/portal';\nimport Ripple from 'primevue/ripple';\nimport VirtualScroller from 'primevue/virtualscroller';\nimport BaseMultiSelect from './BaseMultiSelect.vue';\n\nexport default {\n    name: 'MultiSelect',\n    extends: BaseMultiSelect,\n    inheritAttrs: false,\n    emits: ['change', 'focus', 'blur', 'before-show', 'before-hide', 'show', 'hide', 'filter', 'selectall-change'],\n    inject: {\n        $pcFluid: { default: null }\n    },\n    outsideClickListener: null,\n    scrollHandler: null,\n    resizeListener: null,\n    overlay: null,\n    list: null,\n    virtualScroller: null,\n    startRangeIndex: -1,\n    searchTimeout: null,\n    searchValue: '',\n    selectOnFocus: false,\n    data() {\n        return {\n            clicked: false,\n            focused: false,\n            focusedOptionIndex: -1,\n            filterValue: null,\n            overlayVisible: false\n        };\n    },\n    watch: {\n        options() {\n            this.autoUpdateModel();\n        }\n    },\n    mounted() {\n        this.autoUpdateModel();\n    },\n    beforeUnmount() {\n        this.unbindOutsideClickListener();\n        this.unbindResizeListener();\n\n        if (this.scrollHandler) {\n            this.scrollHandler.destroy();\n            this.scrollHandler = null;\n        }\n\n        if (this.overlay) {\n            ZIndex.clear(this.overlay);\n            this.overlay = null;\n        }\n    },\n    methods: {\n        getOptionIndex(index, fn) {\n            return this.virtualScrollerDisabled ? index : fn && fn(index)['index'];\n        },\n        getOptionLabel(option) {\n            return this.optionLabel ? resolveFieldData(option, this.optionLabel) : option;\n        },\n        getOptionValue(option) {\n            return this.optionValue ? resolveFieldData(option, this.optionValue) : option;\n        },\n        getOptionRenderKey(option, index) {\n            return this.dataKey ? resolveFieldData(option, this.dataKey) : this.getOptionLabel(option) + `_${index}`;\n        },\n        getHeaderCheckboxPTOptions(key) {\n            return this.ptm(key, {\n                context: {\n                    selected: this.allSelected\n                }\n            });\n        },\n        getCheckboxPTOptions(option, itemOptions, index, key) {\n            return this.ptm(key, {\n                context: {\n                    selected: this.isSelected(option),\n                    focused: this.focusedOptionIndex === this.getOptionIndex(index, itemOptions),\n                    disabled: this.isOptionDisabled(option)\n                }\n            });\n        },\n        isOptionDisabled(option) {\n            if (this.maxSelectionLimitReached && !this.isSelected(option)) {\n                return true;\n            }\n\n            return this.optionDisabled ? resolveFieldData(option, this.optionDisabled) : false;\n        },\n        isOptionGroup(option) {\n            return this.optionGroupLabel && option.optionGroup && option.group;\n        },\n        getOptionGroupLabel(optionGroup) {\n            return resolveFieldData(optionGroup, this.optionGroupLabel);\n        },\n        getOptionGroupChildren(optionGroup) {\n            return resolveFieldData(optionGroup, this.optionGroupChildren);\n        },\n        getAriaPosInset(index) {\n            return (this.optionGroupLabel ? index - this.visibleOptions.slice(0, index).filter((option) => this.isOptionGroup(option)).length : index) + 1;\n        },\n        show(isFocus) {\n            this.$emit('before-show');\n            this.overlayVisible = true;\n            this.focusedOptionIndex = this.focusedOptionIndex !== -1 ? this.focusedOptionIndex : this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : this.findSelectedOptionIndex();\n\n            isFocus && focus(this.$refs.focusInput);\n        },\n        hide(isFocus) {\n            const _hide = () => {\n                this.$emit('before-hide');\n                this.overlayVisible = false;\n                this.clicked = false;\n                this.focusedOptionIndex = -1;\n                this.searchValue = '';\n\n                this.resetFilterOnHide && (this.filterValue = null);\n                isFocus && focus(this.$refs.focusInput);\n            };\n\n            setTimeout(() => {\n                _hide();\n            }, 0); // For ScreenReaders\n        },\n        onFocus(event) {\n            if (this.disabled) {\n                // For ScreenReaders\n                return;\n            }\n\n            this.focused = true;\n\n            if (this.overlayVisible) {\n                this.focusedOptionIndex = this.focusedOptionIndex !== -1 ? this.focusedOptionIndex : this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : this.findSelectedOptionIndex();\n                !this.autoFilterFocus && this.scrollInView(this.focusedOptionIndex);\n            }\n\n            this.$emit('focus', event);\n        },\n        onBlur(event) {\n            this.clicked = false;\n            this.focused = false;\n            this.focusedOptionIndex = -1;\n            this.searchValue = '';\n            this.$emit('blur', event);\n            this.formField.onBlur?.();\n        },\n        onKeyDown(event) {\n            if (this.disabled) {\n                event.preventDefault();\n\n                return;\n            }\n\n            const metaKey = event.metaKey || event.ctrlKey;\n\n            switch (event.code) {\n                case 'ArrowDown':\n                    this.onArrowDownKey(event);\n                    break;\n\n                case 'ArrowUp':\n                    this.onArrowUpKey(event);\n                    break;\n\n                case 'Home':\n                    this.onHomeKey(event);\n                    break;\n\n                case 'End':\n                    this.onEndKey(event);\n                    break;\n\n                case 'PageDown':\n                    this.onPageDownKey(event);\n                    break;\n\n                case 'PageUp':\n                    this.onPageUpKey(event);\n                    break;\n\n                case 'Enter':\n                case 'NumpadEnter':\n                case 'Space':\n                    this.onEnterKey(event);\n                    break;\n\n                case 'Escape':\n                    this.onEscapeKey(event);\n                    break;\n\n                case 'Tab':\n                    this.onTabKey(event);\n                    break;\n\n                case 'ShiftLeft':\n                case 'ShiftRight':\n                    this.onShiftKey(event);\n                    break;\n\n                default:\n                    if (event.code === 'KeyA' && metaKey) {\n                        const value = this.visibleOptions.filter((option) => this.isValidOption(option)).map((option) => this.getOptionValue(option));\n\n                        this.updateModel(event, value);\n\n                        event.preventDefault();\n                        break;\n                    }\n\n                    if (!metaKey && isPrintableCharacter(event.key)) {\n                        !this.overlayVisible && this.show();\n                        this.searchOptions(event);\n                        event.preventDefault();\n                    }\n\n                    break;\n            }\n\n            this.clicked = false;\n        },\n        onContainerClick(event) {\n            if (this.disabled || this.loading) {\n                return;\n            }\n\n            if (event.target.tagName === 'INPUT' || event.target.getAttribute('data-pc-section') === 'clearicon' || event.target.closest('[data-pc-section=\"clearicon\"]')) {\n                return;\n            } else if (!this.overlay || !this.overlay.contains(event.target)) {\n                this.overlayVisible ? this.hide(true) : this.show(true);\n            }\n\n            this.clicked = true;\n        },\n        onClearClick(event) {\n            this.updateModel(event, null);\n            this.resetFilterOnClear && (this.filterValue = null);\n        },\n        onFirstHiddenFocus(event) {\n            const focusableEl = event.relatedTarget === this.$refs.focusInput ? getFirstFocusableElement(this.overlay, ':not([data-p-hidden-focusable=\"true\"])') : this.$refs.focusInput;\n\n            focus(focusableEl);\n        },\n        onLastHiddenFocus(event) {\n            const focusableEl = event.relatedTarget === this.$refs.focusInput ? getLastFocusableElement(this.overlay, ':not([data-p-hidden-focusable=\"true\"])') : this.$refs.focusInput;\n\n            focus(focusableEl);\n        },\n        onOptionSelect(event, option, index = -1, isFocus = false) {\n            if (this.disabled || this.isOptionDisabled(option)) {\n                return;\n            }\n\n            let selected = this.isSelected(option);\n            let value = null;\n            const _value = this.getOptionValue(option) !== '' ? this.getOptionValue(option) : this.getOptionLabel(option);\n\n            if (selected) value = this.d_value.filter((val) => !equals(val, _value, this.equalityKey));\n            else value = [...(this.d_value || []), _value];\n\n            this.updateModel(event, value);\n            index !== -1 && (this.focusedOptionIndex = index);\n            isFocus && focus(this.$refs.focusInput);\n        },\n        onOptionMouseMove(event, index) {\n            if (this.focusOnHover) {\n                this.changeFocusedOptionIndex(event, index);\n            }\n        },\n        onOptionSelectRange(event, start = -1, end = -1) {\n            start === -1 && (start = this.findNearestSelectedOptionIndex(end, true));\n            end === -1 && (end = this.findNearestSelectedOptionIndex(start));\n\n            if (start !== -1 && end !== -1) {\n                const rangeStart = Math.min(start, end);\n                const rangeEnd = Math.max(start, end);\n                const value = this.visibleOptions\n                    .slice(rangeStart, rangeEnd + 1)\n                    .filter((option) => this.isValidOption(option))\n                    .map((option) => this.getOptionValue(option));\n\n                this.updateModel(event, value);\n            }\n        },\n        onFilterChange(event) {\n            const value = event.target.value;\n\n            this.filterValue = value;\n            this.focusedOptionIndex = -1;\n            this.$emit('filter', { originalEvent: event, value });\n\n            !this.virtualScrollerDisabled && this.virtualScroller.scrollToIndex(0);\n        },\n        onFilterKeyDown(event) {\n            switch (event.code) {\n                case 'ArrowDown':\n                    this.onArrowDownKey(event);\n                    break;\n\n                case 'ArrowUp':\n                    this.onArrowUpKey(event, true);\n                    break;\n\n                case 'ArrowLeft':\n                case 'ArrowRight':\n                    this.onArrowLeftKey(event, true);\n                    break;\n\n                case 'Home':\n                    this.onHomeKey(event, true);\n                    break;\n\n                case 'End':\n                    this.onEndKey(event, true);\n                    break;\n\n                case 'Enter':\n                case 'NumpadEnter':\n                    this.onEnterKey(event);\n                    break;\n\n                case 'Escape':\n                    this.onEscapeKey(event);\n                    break;\n\n                case 'Tab':\n                    this.onTabKey(event, true);\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onFilterBlur() {\n            this.focusedOptionIndex = -1;\n        },\n        onFilterUpdated() {\n            if (this.overlayVisible) {\n                this.alignOverlay();\n            }\n        },\n        onOverlayClick(event) {\n            OverlayEventBus.emit('overlay-click', {\n                originalEvent: event,\n                target: this.$el\n            });\n        },\n        onOverlayKeyDown(event) {\n            switch (event.code) {\n                case 'Escape':\n                    this.onEscapeKey(event);\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onArrowDownKey(event) {\n            if (!this.overlayVisible) {\n                this.show();\n            } else {\n                const optionIndex = this.focusedOptionIndex !== -1 ? this.findNextOptionIndex(this.focusedOptionIndex) : this.clicked ? this.findFirstOptionIndex() : this.findFirstFocusedOptionIndex();\n\n                if (event.shiftKey) {\n                    this.onOptionSelectRange(event, this.startRangeIndex, optionIndex);\n                }\n\n                this.changeFocusedOptionIndex(event, optionIndex);\n            }\n\n            event.preventDefault();\n        },\n        onArrowUpKey(event, pressedInInputText = false) {\n            if (event.altKey && !pressedInInputText) {\n                if (this.focusedOptionIndex !== -1) {\n                    this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n                }\n\n                this.overlayVisible && this.hide();\n                event.preventDefault();\n            } else {\n                const optionIndex = this.focusedOptionIndex !== -1 ? this.findPrevOptionIndex(this.focusedOptionIndex) : this.clicked ? this.findLastOptionIndex() : this.findLastFocusedOptionIndex();\n\n                if (event.shiftKey) {\n                    this.onOptionSelectRange(event, optionIndex, this.startRangeIndex);\n                }\n\n                this.changeFocusedOptionIndex(event, optionIndex);\n\n                !this.overlayVisible && this.show();\n                event.preventDefault();\n            }\n        },\n        onArrowLeftKey(event, pressedInInputText = false) {\n            pressedInInputText && (this.focusedOptionIndex = -1);\n        },\n        onHomeKey(event, pressedInInputText = false) {\n            if (pressedInInputText) {\n                const target = event.currentTarget;\n\n                if (event.shiftKey) {\n                    target.setSelectionRange(0, event.target.selectionStart);\n                } else {\n                    target.setSelectionRange(0, 0);\n                    this.focusedOptionIndex = -1;\n                }\n            } else {\n                let metaKey = event.metaKey || event.ctrlKey;\n                let optionIndex = this.findFirstOptionIndex();\n\n                if (event.shiftKey && metaKey) {\n                    this.onOptionSelectRange(event, optionIndex, this.startRangeIndex);\n                }\n\n                this.changeFocusedOptionIndex(event, optionIndex);\n\n                !this.overlayVisible && this.show();\n            }\n\n            event.preventDefault();\n        },\n        onEndKey(event, pressedInInputText = false) {\n            if (pressedInInputText) {\n                const target = event.currentTarget;\n\n                if (event.shiftKey) {\n                    target.setSelectionRange(event.target.selectionStart, target.value.length);\n                } else {\n                    const len = target.value.length;\n\n                    target.setSelectionRange(len, len);\n                    this.focusedOptionIndex = -1;\n                }\n            } else {\n                let metaKey = event.metaKey || event.ctrlKey;\n                let optionIndex = this.findLastOptionIndex();\n\n                if (event.shiftKey && metaKey) {\n                    this.onOptionSelectRange(event, this.startRangeIndex, optionIndex);\n                }\n\n                this.changeFocusedOptionIndex(event, optionIndex);\n\n                !this.overlayVisible && this.show();\n            }\n\n            event.preventDefault();\n        },\n        onPageUpKey(event) {\n            this.scrollInView(0);\n            event.preventDefault();\n        },\n        onPageDownKey(event) {\n            this.scrollInView(this.visibleOptions.length - 1);\n            event.preventDefault();\n        },\n        onEnterKey(event) {\n            if (!this.overlayVisible) {\n                this.focusedOptionIndex = -1; // reset\n                this.onArrowDownKey(event);\n            } else {\n                if (this.focusedOptionIndex !== -1) {\n                    if (event.shiftKey) this.onOptionSelectRange(event, this.focusedOptionIndex);\n                    else this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n                }\n            }\n\n            event.preventDefault();\n        },\n        onEscapeKey(event) {\n            if (this.overlayVisible) {\n                this.hide(true);\n                event.stopPropagation();\n            }\n\n            event.preventDefault();\n        },\n        onTabKey(event, pressedInInputText = false) {\n            if (!pressedInInputText) {\n                if (this.overlayVisible && this.hasFocusableElements()) {\n                    focus(event.shiftKey ? this.$refs.lastHiddenFocusableElementOnOverlay : this.$refs.firstHiddenFocusableElementOnOverlay);\n\n                    event.preventDefault();\n                } else {\n                    if (this.focusedOptionIndex !== -1) {\n                        this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n                    }\n\n                    this.overlayVisible && this.hide(this.filter);\n                }\n            }\n        },\n        onShiftKey() {\n            this.startRangeIndex = this.focusedOptionIndex;\n        },\n        onOverlayEnter(el) {\n            ZIndex.set('overlay', el, this.$primevue.config.zIndex.overlay);\n\n            addStyle(el, { position: 'absolute', top: '0' });\n            this.alignOverlay();\n            this.scrollInView();\n\n            this.autoFilterFocus && focus(this.$refs.filterInput.$el);\n            this.autoUpdateModel();\n\n            // Issue: #7508\n            this.$attrSelector && el.setAttribute(this.$attrSelector, '');\n        },\n        onOverlayAfterEnter() {\n            this.bindOutsideClickListener();\n            this.bindScrollListener();\n            this.bindResizeListener();\n\n            this.$emit('show');\n        },\n        onOverlayLeave() {\n            this.unbindOutsideClickListener();\n            this.unbindScrollListener();\n            this.unbindResizeListener();\n\n            this.$emit('hide');\n            this.overlay = null;\n        },\n        onOverlayAfterLeave(el) {\n            ZIndex.clear(el);\n        },\n        alignOverlay() {\n            if (this.appendTo === 'self') {\n                relativePosition(this.overlay, this.$el);\n            } else {\n                this.overlay.style.minWidth = getOuterWidth(this.$el) + 'px';\n                absolutePosition(this.overlay, this.$el);\n            }\n        },\n        bindOutsideClickListener() {\n            if (!this.outsideClickListener) {\n                this.outsideClickListener = (event) => {\n                    if (this.overlayVisible && this.isOutsideClicked(event)) {\n                        this.hide();\n                    }\n                };\n\n                document.addEventListener('click', this.outsideClickListener, true);\n            }\n        },\n        unbindOutsideClickListener() {\n            if (this.outsideClickListener) {\n                document.removeEventListener('click', this.outsideClickListener, true);\n                this.outsideClickListener = null;\n            }\n        },\n        bindScrollListener() {\n            if (!this.scrollHandler) {\n                this.scrollHandler = new ConnectedOverlayScrollHandler(this.$refs.container, () => {\n                    if (this.overlayVisible) {\n                        this.hide();\n                    }\n                });\n            }\n\n            this.scrollHandler.bindScrollListener();\n        },\n        unbindScrollListener() {\n            if (this.scrollHandler) {\n                this.scrollHandler.unbindScrollListener();\n            }\n        },\n        bindResizeListener() {\n            if (!this.resizeListener) {\n                this.resizeListener = () => {\n                    if (this.overlayVisible && !isTouchDevice()) {\n                        this.hide();\n                    }\n                };\n\n                window.addEventListener('resize', this.resizeListener);\n            }\n        },\n        unbindResizeListener() {\n            if (this.resizeListener) {\n                window.removeEventListener('resize', this.resizeListener);\n                this.resizeListener = null;\n            }\n        },\n        isOutsideClicked(event) {\n            return !(this.$el.isSameNode(event.target) || this.$el.contains(event.target) || (this.overlay && this.overlay.contains(event.target)));\n        },\n        getLabelByValue(value) {\n            const options = this.optionGroupLabel ? this.flatOptions(this.options) : this.options || [];\n            const matchedOption = options.find((option) => !this.isOptionGroup(option) && equals(this.getOptionValue(option) !== '' ? this.getOptionValue(option) : this.getOptionLabel(option), value, this.equalityKey));\n\n            return matchedOption ? this.getOptionLabel(matchedOption) : null;\n        },\n        getSelectedItemsLabel() {\n            let pattern = /{(.*?)}/;\n            const selectedItemsLabel = this.selectedItemsLabel || this.$primevue.config.locale.selectionMessage;\n\n            if (pattern.test(selectedItemsLabel)) {\n                return selectedItemsLabel.replace(selectedItemsLabel.match(pattern)[0], this.d_value.length + '');\n            }\n\n            return selectedItemsLabel;\n        },\n        onToggleAll(event) {\n            if (this.selectAll !== null) {\n                this.$emit('selectall-change', { originalEvent: event, checked: !this.allSelected });\n            } else {\n                const value = this.allSelected ? [] : this.visibleOptions.filter((option) => this.isValidOption(option)).map((option) => this.getOptionValue(option));\n\n                this.updateModel(event, value);\n            }\n        },\n        removeOption(event, optionValue) {\n            event.stopPropagation();\n            let value = this.d_value.filter((val) => !equals(val, optionValue, this.equalityKey));\n\n            this.updateModel(event, value);\n        },\n        clearFilter() {\n            this.filterValue = null;\n        },\n        hasFocusableElements() {\n            return getFocusableElements(this.overlay, ':not([data-p-hidden-focusable=\"true\"])').length > 0;\n        },\n        isOptionMatched(option) {\n            return this.isValidOption(option) && typeof this.getOptionLabel(option) === 'string' && this.getOptionLabel(option)?.toLocaleLowerCase(this.filterLocale).startsWith(this.searchValue.toLocaleLowerCase(this.filterLocale));\n        },\n        isValidOption(option) {\n            return isNotEmpty(option) && !(this.isOptionDisabled(option) || this.isOptionGroup(option));\n        },\n        isValidSelectedOption(option) {\n            return this.isValidOption(option) && this.isSelected(option);\n        },\n        isEquals(value1, value2) {\n            return equals(value1, value2, this.equalityKey);\n        },\n        isSelected(option) {\n            const optionValue = this.getOptionValue(option) !== '' ? this.getOptionValue(option) : this.getOptionLabel(option);\n\n            return (this.d_value || []).some((value) => this.isEquals(value, optionValue));\n        },\n        findFirstOptionIndex() {\n            return this.visibleOptions.findIndex((option) => this.isValidOption(option));\n        },\n        findLastOptionIndex() {\n            return findLastIndex(this.visibleOptions, (option) => this.isValidOption(option));\n        },\n        findNextOptionIndex(index) {\n            const matchedOptionIndex = index < this.visibleOptions.length - 1 ? this.visibleOptions.slice(index + 1).findIndex((option) => this.isValidOption(option)) : -1;\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex + index + 1 : index;\n        },\n        findPrevOptionIndex(index) {\n            const matchedOptionIndex = index > 0 ? findLastIndex(this.visibleOptions.slice(0, index), (option) => this.isValidOption(option)) : -1;\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex : index;\n        },\n        findSelectedOptionIndex() {\n            if (this.$filled) {\n                for (let index = this.d_value.length - 1; index >= 0; index--) {\n                    const value = this.d_value[index];\n                    const matchedOptionIndex = this.visibleOptions.findIndex((option) => this.isValidSelectedOption(option) && this.isEquals(value, this.getOptionValue(option)));\n\n                    if (matchedOptionIndex > -1) return matchedOptionIndex;\n                }\n            }\n\n            return -1;\n        },\n        findFirstSelectedOptionIndex() {\n            return this.$filled ? this.visibleOptions.findIndex((option) => this.isValidSelectedOption(option)) : -1;\n        },\n        findLastSelectedOptionIndex() {\n            return this.$filled ? findLastIndex(this.visibleOptions, (option) => this.isValidSelectedOption(option)) : -1;\n        },\n        findNextSelectedOptionIndex(index) {\n            const matchedOptionIndex = this.$filled && index < this.visibleOptions.length - 1 ? this.visibleOptions.slice(index + 1).findIndex((option) => this.isValidSelectedOption(option)) : -1;\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex + index + 1 : -1;\n        },\n        findPrevSelectedOptionIndex(index) {\n            const matchedOptionIndex = this.$filled && index > 0 ? findLastIndex(this.visibleOptions.slice(0, index), (option) => this.isValidSelectedOption(option)) : -1;\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex : -1;\n        },\n        findNearestSelectedOptionIndex(index, firstCheckUp = false) {\n            let matchedOptionIndex = -1;\n\n            if (this.$filled) {\n                if (firstCheckUp) {\n                    matchedOptionIndex = this.findPrevSelectedOptionIndex(index);\n                    matchedOptionIndex = matchedOptionIndex === -1 ? this.findNextSelectedOptionIndex(index) : matchedOptionIndex;\n                } else {\n                    matchedOptionIndex = this.findNextSelectedOptionIndex(index);\n                    matchedOptionIndex = matchedOptionIndex === -1 ? this.findPrevSelectedOptionIndex(index) : matchedOptionIndex;\n                }\n            }\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex : index;\n        },\n        findFirstFocusedOptionIndex() {\n            const selectedIndex = this.findFirstSelectedOptionIndex();\n\n            return selectedIndex < 0 ? this.findFirstOptionIndex() : selectedIndex;\n        },\n        findLastFocusedOptionIndex() {\n            const selectedIndex = this.findSelectedOptionIndex();\n\n            return selectedIndex < 0 ? this.findLastOptionIndex() : selectedIndex;\n        },\n        searchOptions(event) {\n            this.searchValue = (this.searchValue || '') + event.key;\n\n            let optionIndex = -1;\n\n            if (isNotEmpty(this.searchValue)) {\n                if (this.focusedOptionIndex !== -1) {\n                    optionIndex = this.visibleOptions.slice(this.focusedOptionIndex).findIndex((option) => this.isOptionMatched(option));\n                    optionIndex = optionIndex === -1 ? this.visibleOptions.slice(0, this.focusedOptionIndex).findIndex((option) => this.isOptionMatched(option)) : optionIndex + this.focusedOptionIndex;\n                } else {\n                    optionIndex = this.visibleOptions.findIndex((option) => this.isOptionMatched(option));\n                }\n\n                if (optionIndex === -1 && this.focusedOptionIndex === -1) {\n                    optionIndex = this.findFirstFocusedOptionIndex();\n                }\n\n                if (optionIndex !== -1) {\n                    this.changeFocusedOptionIndex(event, optionIndex);\n                }\n            }\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(() => {\n                this.searchValue = '';\n                this.searchTimeout = null;\n            }, 500);\n        },\n        changeFocusedOptionIndex(event, index) {\n            if (this.focusedOptionIndex !== index) {\n                this.focusedOptionIndex = index;\n                this.scrollInView();\n\n                if (this.selectOnFocus) {\n                    this.onOptionSelect(event, this.visibleOptions[index]);\n                }\n            }\n        },\n        scrollInView(index = -1) {\n            this.$nextTick(() => {\n                const id = index !== -1 ? `${this.$id}_${index}` : this.focusedOptionId;\n                const element = findSingle(this.list, `li[id=\"${id}\"]`);\n\n                if (element) {\n                    element.scrollIntoView && element.scrollIntoView({ block: 'nearest', inline: 'nearest' });\n                } else if (!this.virtualScrollerDisabled) {\n                    this.virtualScroller && this.virtualScroller.scrollToIndex(index !== -1 ? index : this.focusedOptionIndex);\n                }\n            });\n        },\n        autoUpdateModel() {\n            if (this.autoOptionFocus) {\n                this.focusedOptionIndex = this.findFirstFocusedOptionIndex();\n            }\n\n            if (this.selectOnFocus && this.autoOptionFocus && !this.$filled) {\n                const value = this.getOptionValue(this.visibleOptions[this.focusedOptionIndex]);\n\n                this.updateModel(null, [value]);\n            }\n        },\n        updateModel(event, value) {\n            this.writeValue(value, event);\n            this.$emit('change', { originalEvent: event, value });\n        },\n        flatOptions(options) {\n            return (options || []).reduce((result, option, index) => {\n                result.push({ optionGroup: option, group: true, index });\n\n                const optionGroupChildren = this.getOptionGroupChildren(option);\n\n                optionGroupChildren && optionGroupChildren.forEach((o) => result.push(o));\n\n                return result;\n            }, []);\n        },\n        overlayRef(el) {\n            this.overlay = el;\n        },\n        listRef(el, contentRef) {\n            this.list = el;\n            contentRef && contentRef(el); // For VirtualScroller\n        },\n        virtualScrollerRef(el) {\n            this.virtualScroller = el;\n        }\n    },\n    computed: {\n        visibleOptions() {\n            const options = this.optionGroupLabel ? this.flatOptions(this.options) : this.options || [];\n\n            if (this.filterValue) {\n                const filteredOptions = FilterService.filter(options, this.searchFields, this.filterValue, this.filterMatchMode, this.filterLocale);\n\n                if (this.optionGroupLabel) {\n                    const optionGroups = this.options || [];\n                    const filtered = [];\n\n                    optionGroups.forEach((group) => {\n                        const groupChildren = this.getOptionGroupChildren(group);\n                        const filteredItems = groupChildren.filter((item) => filteredOptions.includes(item));\n\n                        if (filteredItems.length > 0) filtered.push({ ...group, [typeof this.optionGroupChildren === 'string' ? this.optionGroupChildren : 'items']: [...filteredItems] });\n                    });\n\n                    return this.flatOptions(filtered);\n                }\n\n                return filteredOptions;\n            }\n\n            return options;\n        },\n        label() {\n            // TODO: Refactor\n            let label;\n\n            if (this.d_value && this.d_value.length) {\n                if (isNotEmpty(this.maxSelectedLabels) && this.d_value.length > this.maxSelectedLabels) {\n                    return this.getSelectedItemsLabel();\n                } else {\n                    label = '';\n\n                    for (let i = 0; i < this.d_value.length; i++) {\n                        if (i !== 0) {\n                            label += ', ';\n                        }\n\n                        label += this.getLabelByValue(this.d_value[i]);\n                    }\n                }\n            } else {\n                label = this.placeholder;\n            }\n\n            return label;\n        },\n        chipSelectedItems() {\n            return isNotEmpty(this.maxSelectedLabels) && this.d_value && this.d_value.length > this.maxSelectedLabels;\n        },\n        allSelected() {\n            return this.selectAll !== null ? this.selectAll : isNotEmpty(this.visibleOptions) && this.visibleOptions.every((option) => this.isOptionGroup(option) || this.isOptionDisabled(option) || this.isSelected(option));\n        },\n        // @deprecated use $filled instead.\n        hasSelectedOption() {\n            return this.$filled;\n        },\n        equalityKey() {\n            return this.optionValue ? null : this.dataKey;\n        },\n        searchFields() {\n            return this.filterFields || [this.optionLabel];\n        },\n        maxSelectionLimitReached() {\n            return this.selectionLimit && this.d_value && this.d_value.length === this.selectionLimit;\n        },\n        filterResultMessageText() {\n            return isNotEmpty(this.visibleOptions) ? this.filterMessageText.replaceAll('{0}', this.visibleOptions.length) : this.emptyFilterMessageText;\n        },\n        filterMessageText() {\n            return this.filterMessage || this.$primevue.config.locale.searchMessage || '';\n        },\n        emptyFilterMessageText() {\n            return this.emptyFilterMessage || this.$primevue.config.locale.emptySearchMessage || this.$primevue.config.locale.emptyFilterMessage || '';\n        },\n        emptyMessageText() {\n            return this.emptyMessage || this.$primevue.config.locale.emptyMessage || '';\n        },\n        selectionMessageText() {\n            return this.selectionMessage || this.$primevue.config.locale.selectionMessage || '';\n        },\n        emptySelectionMessageText() {\n            return this.emptySelectionMessage || this.$primevue.config.locale.emptySelectionMessage || '';\n        },\n        selectedMessageText() {\n            return this.$filled ? this.selectionMessageText.replaceAll('{0}', this.d_value.length) : this.emptySelectionMessageText;\n        },\n        focusedOptionId() {\n            return this.focusedOptionIndex !== -1 ? `${this.$id}_${this.focusedOptionIndex}` : null;\n        },\n        ariaSetSize() {\n            return this.visibleOptions.filter((option) => !this.isOptionGroup(option)).length;\n        },\n        toggleAllAriaLabel() {\n            return this.$primevue.config.locale.aria ? this.$primevue.config.locale.aria[this.allSelected ? 'selectAll' : 'unselectAll'] : undefined;\n        },\n        listAriaLabel() {\n            return this.$primevue.config.locale.aria ? this.$primevue.config.locale.aria.listLabel : undefined;\n        },\n        virtualScrollerDisabled() {\n            return !this.virtualScrollerOptions;\n        },\n        hasFluid() {\n            return isEmpty(this.fluid) ? !!this.$pcFluid : this.fluid;\n        },\n        isClearIconVisible() {\n            return this.showClear && this.d_value && this.d_value.length && this.d_value != null && isNotEmpty(this.options);\n        },\n        containerDataP() {\n            return cn({\n                invalid: this.$invalid,\n                disabled: this.disabled,\n                focus: this.focused,\n                fluid: this.$fluid,\n                filled: this.$variant === 'filled',\n                [this.size]: this.size\n            });\n        },\n        labelDataP() {\n            return cn({\n                placeholder: this.label === this.placeholder,\n                clearable: this.showClear,\n                disabled: this.disabled,\n                [this.size]: this.size,\n                'has-chip': this.display === 'chip' && this.d_value && this.d_value.length && (this.maxSelectedLabels ? this.d_value.length <= this.maxSelectedLabels : true),\n                empty: !this.placeholder && !this.$filled\n            });\n        },\n        dropdownIconDataP() {\n            return cn({\n                [this.size]: this.size\n            });\n        },\n        overlayDataP() {\n            return cn({\n                ['portal-' + this.appendTo]: 'portal-' + this.appendTo\n            });\n        }\n    },\n    directives: {\n        ripple: Ripple\n    },\n    components: {\n        InputText,\n        Checkbox,\n        VirtualScroller,\n        Portal,\n        Chip,\n        IconField,\n        InputIcon,\n        TimesIcon,\n        SearchIcon,\n        ChevronDownIcon,\n        SpinnerIcon,\n        CheckIcon\n    }\n};\n</script>\n"],"names":["name","BaseInput","props","options","Array","optionLabel","optionValue","optionDisabled","optionGroupLabel","optionGroupChildren","scrollHeight","type","String","placeholder","inputId","panelClass","panelStyle","overlayClass","overlayStyle","dataKey","showClear","Boolean","clearIcon","undefined","resetFilterOnClear","filter","filterPlaceholder","filterLocale","filterMatchMode","filterFields","appendTo","Object","display","selectedItemsLabel","maxSelectedLabels","Number","selectionLimit","showToggleAll","loading","checkboxIcon","dropdownIcon","filterIcon","loadingIcon","removeTokenIcon","chipIcon","selectAll","resetFilterOnHide","virtualScrollerOptions","autoOptionFocus","autoFilterFocus","focusOnHover","highlightOnSelect","filterMessage","selectionMessage","emptySelectionMessage","emptyFilterMessage","emptyMessage","tabindex","ariaLabel","ariaLabelledby","style","MultiSelectStyle","provide","$pcMultiSelect","$parentInstance","BaseMultiSelect","inheritAttrs","emits","inject","$pcFluid","outsideClickListener","scrollHandler","resizeListener","overlay","list","virtualScroller","startRangeIndex","searchTimeout","searchValue","selectOnFocus","data","clicked","focused","focusedOptionIndex","filterValue","overlayVisible","watch","autoUpdateModel","mounted","beforeUnmount","unbindOutsideClickListener","unbindResizeListener","destroy","ZIndex","clear","methods","getOptionIndex","index","fn","virtualScrollerDisabled","getOptionLabel","option","resolveFieldData","getOptionValue","getOptionRenderKey","concat","getHeaderCheckboxPTOptions","key","ptm","context","selected","allSelected","getCheckboxPTOptions","itemOptions","isSelected","disabled","isOptionDisabled","maxSelectionLimitReached","isOptionGroup","optionGroup","group","getOptionGroupLabel","getOptionGroupChildren","getAriaPosInset","_this","visibleOptions","slice","length","show","isFocus","$emit","findFirstFocusedOptionIndex","findSelectedOptionIndex","focus","$refs","focusInput","hide","_this2","_hide","setTimeout","onFocus","event","scrollInView","onBlur","_this$formField$onBlu","_this$formField","formField","call","onKeyDown","_this3","preventDefault","metaKey","ctrlKey","code","onArrowDownKey","onArrowUpKey","onHomeKey","onEndKey","onPageDownKey","onPageUpKey","onEnterKey","onEscapeKey","onTabKey","onShiftKey","value","isValidOption","map","updateModel","isPrintableCharacter","searchOptions","onContainerClick","target","tagName","getAttribute","closest","contains","onClearClick","onFirstHiddenFocus","focusableEl","relatedTarget","getFirstFocusableElement","onLastHiddenFocus","getLastFocusableElement","onOptionSelect","_this4","arguments","_value","d_value","val","equals","equalityKey","_toConsumableArray","onOptionMouseMove","changeFocusedOptionIndex","onOptionSelectRange","_this5","start","end","findNearestSelectedOptionIndex","rangeStart","Math","min","rangeEnd","max","onFilterChange","originalEvent","scrollToIndex","onFilterKeyDown","onArrowLeftKey","onFilterBlur","onFilterUpdated","alignOverlay","onOverlayClick","OverlayEventBus","emit","$el","onOverlayKeyDown","optionIndex","findNextOptionIndex","findFirstOptionIndex","shiftKey","pressedInInputText","altKey","findPrevOptionIndex","findLastOptionIndex","findLastFocusedOptionIndex","currentTarget","setSelectionRange","selectionStart","len","stopPropagation","hasFocusableElements","lastHiddenFocusableElementOnOverlay","firstHiddenFocusableElementOnOverlay","onOverlayEnter","el","set","$primevue","config","zIndex","addStyle","position","top","filterInput","$attrSelector","setAttribute","onOverlayAfterEnter","bindOutsideClickListener","bindScrollListener","bindResizeListener","onOverlayLeave","unbindScrollListener","onOverlayAfterLeave","relativePosition","minWidth","getOuterWidth","absolutePosition","_this6","isOutsideClicked","document","addEventListener","removeEventListener","_this7","ConnectedOverlayScrollHandler","container","_this8","isTouchDevice","window","isSameNode","getLabelByValue","_this9","flatOptions","matchedOption","find","getSelectedItemsLabel","pattern","locale","test","replace","match","onToggleAll","_this0","checked","removeOption","_this1","clearFilter","getFocusableElements","isOptionMatched","_this$getOptionLabel","toLocaleLowerCase","startsWith","isNotEmpty","isValidSelectedOption","isEquals","value1","value2","_this10","some","_this11","findIndex","_this12","findLastIndex","_this13","matchedOptionIndex","_this14","_this15","$filled","_loop","v","_ret","findFirstSelectedOptionIndex","_this16","findLastSelectedOptionIndex","_this17","findNextSelectedOptionIndex","_this18","findPrevSelectedOptionIndex","_this19","firstCheckUp","selectedIndex","_this20","clearTimeout","_this21","$nextTick","id","$id","focusedOptionId","element","findSingle","scrollIntoView","block","inline","writeValue","_this22","reduce","result","push","forEach","o","overlayRef","listRef","contentRef","virtualScrollerRef","computed","_this23","filteredOptions","FilterService","searchFields","optionGroups","filtered","groupChildren","filteredItems","item","includes","_objectSpread","_defineProperty","label","i","chipSelectedItems","_this24","every","hasSelectedOption","filterResultMessageText","filterMessageText","replaceAll","emptyFilterMessageText","searchMessage","emptySearchMessage","emptyMessageText","selectionMessageText","emptySelectionMessageText","selectedMessageText","ariaSetSize","_this25","toggleAllAriaLabel","aria","listAriaLabel","listLabel","hasFluid","isEmpty","fluid","isClearIconVisible","containerDataP","cn","invalid","$invalid","$fluid","filled","$variant","size","labelDataP","clearable","dropdownIconDataP","overlayDataP","directives","ripple","Ripple","components","InputText","Checkbox","VirtualScroller","Portal","Chip","IconField","InputIcon","TimesIcon","SearchIcon","ChevronDownIcon","SpinnerIcon","CheckIcon","_openBlock","_createElementBlock","_mergeProps","ref","_ctx","cx","sx","onClick","$options","apply","ptmi","_createElementVNode","readonly","role","$data","onKeydown","_hoisted_2","_renderSlot","$slots","_Fragment","_renderList","removeCallback","_createVNode","_component_Chip","removeIcon","removable","unstyled","onRemove","$event","pt","removeicon","chipicon","clearCallback","_createBlock","_resolveDynamicComponent","_component_SpinnerIcon","spin","_component_Portal","_Transition","onEnter","onAfterEnter","onLeave","onAfterLeave","_component_Checkbox","modelValue","binary","variant","onChange","formControl","novalidate","icon","_withCtx","slotProps","headercheckboxicon","_normalizeClass","_component_IconField","_component_InputText","onVnodeMounted","onVnodeUpdated","autocomplete","onInput","_component_InputIcon","_component_SearchIcon","_component_VirtualScroller","items","content","_ref2","styleClass","getItemOptions","contentStyle","itemSize","height","_withDirectives","onMousemove","ref_for","defaultValue","optioncheckboxicon","itemcheckboxicon","_toDisplayString","loader","_ref4"],"mappings":"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"}