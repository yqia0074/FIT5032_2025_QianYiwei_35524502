{"version":3,"file":"index.mjs","sources":["../../src/togglebutton/BaseToggleButton.vue","../../src/togglebutton/ToggleButton.vue","../../src/togglebutton/ToggleButton.vue?vue&type=template&id=7a5c1ac9&lang.js"],"sourcesContent":["<script>\nimport BaseEditableHolder from '@primevue/core/baseeditableholder';\nimport ToggleButtonStyle from 'primevue/togglebutton/style';\n\nexport default {\n    name: 'BaseToggleButton',\n    extends: BaseEditableHolder,\n    props: {\n        onIcon: String,\n        offIcon: String,\n        onLabel: {\n            type: String,\n            default: 'Yes'\n        },\n        offLabel: {\n            type: String,\n            default: 'No'\n        },\n        iconPos: {\n            type: String,\n            default: 'left'\n        },\n        readonly: {\n            type: Boolean,\n            default: false\n        },\n        tabindex: {\n            type: Number,\n            default: null\n        },\n        ariaLabelledby: {\n            type: String,\n            default: null\n        },\n        ariaLabel: {\n            type: String,\n            default: null\n        },\n        size: {\n            type: String,\n            default: null\n        },\n        fluid: {\n            type: Boolean,\n            default: null\n        }\n    },\n    style: ToggleButtonStyle,\n    provide() {\n        return {\n            $pcToggleButton: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n","<template>\n    <button\n        v-ripple\n        type=\"button\"\n        :class=\"cx('root')\"\n        :tabindex=\"tabindex\"\n        :disabled=\"disabled\"\n        :aria-pressed=\"d_value\"\n        @click=\"onChange\"\n        @blur=\"onBlur\"\n        v-bind=\"getPTOptions('root')\"\n        :aria-label=\"ariaLabel\"\n        :aria-labelledby=\"ariaLabelledby\"\n        :data-p-checked=\"active\"\n        :data-p-disabled=\"disabled\"\n        :data-p=\"dataP\"\n    >\n        <span :class=\"cx('content')\" v-bind=\"getPTOptions('content')\" :data-p=\"dataP\">\n            <slot>\n                <slot name=\"icon\" :value=\"d_value\" :class=\"cx('icon')\">\n                    <span v-if=\"onIcon || offIcon\" :class=\"[cx('icon'), d_value ? onIcon : offIcon]\" v-bind=\"getPTOptions('icon')\" />\n                </slot>\n                <span :class=\"cx('label')\" v-bind=\"getPTOptions('label')\">{{ label }}</span>\n            </slot>\n        </span>\n    </button>\n</template>\n\n<script>\nimport { cn } from '@primeuix/utils';\nimport { isNotEmpty } from '@primeuix/utils/object';\nimport Ripple from 'primevue/ripple';\nimport BaseToggleButton from './BaseToggleButton.vue';\n\nexport default {\n    name: 'ToggleButton',\n    extends: BaseToggleButton,\n    inheritAttrs: false,\n    emits: ['change'],\n    methods: {\n        getPTOptions(key) {\n            const _ptm = key === 'root' ? this.ptmi : this.ptm;\n\n            return _ptm(key, {\n                context: {\n                    active: this.active,\n                    disabled: this.disabled\n                }\n            });\n        },\n        onChange(event) {\n            if (!this.disabled && !this.readonly) {\n                this.writeValue(!this.d_value, event);\n                this.$emit('change', event);\n            }\n        },\n        onBlur(event) {\n            this.formField.onBlur?.(event);\n        }\n    },\n    computed: {\n        active() {\n            return this.d_value === true;\n        },\n        hasLabel() {\n            return isNotEmpty(this.onLabel) && isNotEmpty(this.offLabel);\n        },\n        label() {\n            return this.hasLabel ? (this.d_value ? this.onLabel : this.offLabel) : '\\u00A0';\n        },\n        dataP() {\n            return cn({\n                checked: this.active,\n                invalid: this.$invalid,\n                [this.size]: this.size\n            });\n        }\n    },\n    directives: {\n        ripple: Ripple\n    }\n};\n</script>\n","<template>\n    <button\n        v-ripple\n        type=\"button\"\n        :class=\"cx('root')\"\n        :tabindex=\"tabindex\"\n        :disabled=\"disabled\"\n        :aria-pressed=\"d_value\"\n        @click=\"onChange\"\n        @blur=\"onBlur\"\n        v-bind=\"getPTOptions('root')\"\n        :aria-label=\"ariaLabel\"\n        :aria-labelledby=\"ariaLabelledby\"\n        :data-p-checked=\"active\"\n        :data-p-disabled=\"disabled\"\n        :data-p=\"dataP\"\n    >\n        <span :class=\"cx('content')\" v-bind=\"getPTOptions('content')\" :data-p=\"dataP\">\n            <slot>\n                <slot name=\"icon\" :value=\"d_value\" :class=\"cx('icon')\">\n                    <span v-if=\"onIcon || offIcon\" :class=\"[cx('icon'), d_value ? onIcon : offIcon]\" v-bind=\"getPTOptions('icon')\" />\n                </slot>\n                <span :class=\"cx('label')\" v-bind=\"getPTOptions('label')\">{{ label }}</span>\n            </slot>\n        </span>\n    </button>\n</template>\n\n<script>\nimport { cn } from '@primeuix/utils';\nimport { isNotEmpty } from '@primeuix/utils/object';\nimport Ripple from 'primevue/ripple';\nimport BaseToggleButton from './BaseToggleButton.vue';\n\nexport default {\n    name: 'ToggleButton',\n    extends: BaseToggleButton,\n    inheritAttrs: false,\n    emits: ['change'],\n    methods: {\n        getPTOptions(key) {\n            const _ptm = key === 'root' ? this.ptmi : this.ptm;\n\n            return _ptm(key, {\n                context: {\n                    active: this.active,\n                    disabled: this.disabled\n                }\n            });\n        },\n        onChange(event) {\n            if (!this.disabled && !this.readonly) {\n                this.writeValue(!this.d_value, event);\n                this.$emit('change', event);\n            }\n        },\n        onBlur(event) {\n            this.formField.onBlur?.(event);\n        }\n    },\n    computed: {\n        active() {\n            return this.d_value === true;\n        },\n        hasLabel() {\n            return isNotEmpty(this.onLabel) && isNotEmpty(this.offLabel);\n        },\n        label() {\n            return this.hasLabel ? (this.d_value ? this.onLabel : this.offLabel) : '\\u00A0';\n        },\n        dataP() {\n            return cn({\n                checked: this.active,\n                invalid: this.$invalid,\n                [this.size]: this.size\n            });\n        }\n    },\n    directives: {\n        ripple: Ripple\n    }\n};\n</script>\n"],"names":["name","BaseEditableHolder","props","onIcon","String","offIcon","onLabel","type","offLabel","iconPos","readonly","Boolean","tabindex","Number","ariaLabelledby","ariaLabel","size","fluid","style","ToggleButtonStyle","provide","$pcToggleButton","$parentInstance","BaseToggleButton","inheritAttrs","emits","methods","getPTOptions","key","_ptm","ptmi","ptm","context","active","disabled","onChange","event","writeValue","d_value","$emit","onBlur","_this$formField$onBlu","_this$formField","formField","call","computed","hasLabel","isNotEmpty","label","dataP","cn","_defineProperty","checked","invalid","$invalid","directives","ripple","Ripple","_withDirectives","_openBlock","_createElementBlock","_mergeProps","_ctx","cx","onClick","$options","apply","arguments","_createElementVNode","_renderSlot","$slots","value"],"mappings":"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"}